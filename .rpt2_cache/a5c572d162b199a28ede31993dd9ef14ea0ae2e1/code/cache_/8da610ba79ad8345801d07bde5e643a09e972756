{"code":"import classnames from 'classnames';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport getDataAttr from '../_util/getDataAttr';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nimport { defaultProps } from './PropsType';\r\nfunction onNextFrame(cb) {\r\n    if (window.requestAnimationFrame) {\r\n        return window.requestAnimationFrame(cb);\r\n    }\r\n    return window.setTimeout(cb, 1);\r\n}\r\nfunction clearNextFrameAction(nextFrameId) {\r\n    if (window.cancelAnimationFrame) {\r\n        window.cancelAnimationFrame(nextFrameId);\r\n    }\r\n    else {\r\n        window.clearTimeout(nextFrameId);\r\n    }\r\n}\r\nexport default class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onSubmit = (e) => {\r\n            e.preventDefault();\r\n            if (this.props.onSubmit) {\r\n                this.props.onSubmit(this.state.value || '');\r\n            }\r\n            if (this.inputRef) {\r\n                this.inputRef.blur();\r\n            }\r\n        };\r\n        this.onChange = (e) => {\r\n            if (!this.state.focus) {\r\n                this.setState({\r\n                    focus: true,\r\n                });\r\n            }\r\n            const value = e.target.value;\r\n            if (!('value' in this.props)) {\r\n                this.setState({ value });\r\n            }\r\n            if (this.props.onChange) {\r\n                this.props.onChange(value);\r\n            }\r\n        };\r\n        this.onFocus = () => {\r\n            this.setState({\r\n                focus: true,\r\n            });\r\n            this.firstFocus = true;\r\n            if (this.props.onFocus) {\r\n                this.props.onFocus();\r\n            }\r\n        };\r\n        this.onBlur = () => {\r\n            this.onBlurTimeout = onNextFrame(() => {\r\n                if (!this.blurFromOnClear) {\r\n                    if (document.activeElement !== this.inputRef) {\r\n                        this.setState({\r\n                            focus: false,\r\n                        });\r\n                    }\r\n                }\r\n                this.blurFromOnClear = false;\r\n            });\r\n            if (this.props.onBlur) {\r\n                this.props.onBlur();\r\n            }\r\n        };\r\n        this.onClear = () => {\r\n            this.doClear();\r\n        };\r\n        this.doClear = (blurFromOnClear = true) => {\r\n            this.blurFromOnClear = blurFromOnClear;\r\n            if (!('value' in this.props)) {\r\n                this.setState({ value: '' });\r\n            }\r\n            if (this.props.onClear) {\r\n                this.props.onClear('');\r\n            }\r\n            if (this.props.onChange) {\r\n                this.props.onChange('');\r\n            }\r\n            if (blurFromOnClear) {\r\n                this.focus();\r\n            }\r\n        };\r\n        this.onCancel = () => {\r\n            if (this.props.onCancel) {\r\n                this.props.onCancel(this.state.value || '');\r\n            }\r\n            else {\r\n                this.doClear(false);\r\n            }\r\n        };\r\n        this.focus = () => {\r\n            if (this.inputRef) {\r\n                this.inputRef.focus();\r\n            }\r\n        };\r\n        let value;\r\n        if ('value' in props) {\r\n            value = props.value || '';\r\n        }\r\n        else if ('defaultValue' in props) {\r\n            value = props.defaultValue;\r\n        }\r\n        else {\r\n            value = '';\r\n        }\r\n        this.state = {\r\n            value,\r\n            focus: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        if (this.rightBtnRef) {\r\n            const initBtn = window.getComputedStyle(this.rightBtnRef);\r\n            this.rightBtnInitMarginleft = initBtn.marginLeft;\r\n        }\r\n        this.componentDidUpdate();\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.syntheticPhRef) {\r\n            if (this.inputContainerRef &&\r\n                this.inputContainerRef.className.indexOf(`${this.props.prefixCls}-start`) > -1) {\r\n                // 检测是否包含名为 ${this.props.prefixCls}-start 样式，生成动画\r\n                // offsetWidth 某些时候是向上取整，某些时候是向下取整，不能用\r\n                if (this.syntheticPhContainerRef) {\r\n                    const realWidth = this.syntheticPhContainerRef.getBoundingClientRect()\r\n                        .width; // 包含小数\r\n                    this.syntheticPhRef.style.width = `${Math.ceil(realWidth)}px`;\r\n                }\r\n                if (!this.props.showCancelButton && this.rightBtnRef) {\r\n                    this.rightBtnRef.style.marginRight = '0';\r\n                }\r\n            }\r\n            else {\r\n                this.syntheticPhRef.style.width = '100%';\r\n                if (!this.props.showCancelButton && this.rightBtnRef) {\r\n                    this.rightBtnRef.style.marginRight = `-${this.rightBtnRef\r\n                        .offsetWidth +\r\n                        (this.rightBtnInitMarginleft != null\r\n                            ? parseInt(this.rightBtnInitMarginleft, 10)\r\n                            : 0)}px`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if ('value' in nextProps && nextProps.value !== this.state.value) {\r\n            this.setState({\r\n                value: nextProps.value,\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.onBlurTimeout) {\r\n            clearNextFrameAction(this.onBlurTimeout);\r\n            this.onBlurTimeout = null;\r\n        }\r\n    }\r\n    render() {\r\n        const { prefixCls, showCancelButton, disabled, placeholder, className, style, maxLength, } = this.props;\r\n        // tslint:disable-next-line:variable-name\r\n        const _locale = getComponentLocale(this.props, this.context, 'SearchBar', () => require('./locale/zh_CN'));\r\n        const { cancelText } = _locale;\r\n        const { value, focus } = this.state;\r\n        const wrapCls = classnames(prefixCls, className, {\r\n            [`${prefixCls}-start`]: !!(focus || (value && value.length > 0)),\r\n        });\r\n        const clearCls = classnames(`${prefixCls}-clear`, {\r\n            [`${prefixCls}-clear-show`]: !!(focus && value && value.length > 0),\r\n        });\r\n        const cancelCls = classnames(`${prefixCls}-cancel`, {\r\n            [`${prefixCls}-cancel-show`]: !!(showCancelButton ||\r\n                focus ||\r\n                (value && value.length > 0)),\r\n            [`${prefixCls}-cancel-anim`]: this.firstFocus,\r\n        });\r\n        return (<form onSubmit={this.onSubmit} className={wrapCls} style={style} ref={el => (this.inputContainerRef = el)} action=\"#\">\n        <div className={`${prefixCls}-input`}>\n          <div className={`${prefixCls}-synthetic-ph`} ref={el => (this.syntheticPhRef = el)}>\n            <span className={`${prefixCls}-synthetic-ph-container`} ref={el => (this.syntheticPhContainerRef = el)}>\n              <i className={`${prefixCls}-synthetic-ph-icon`}/>\n              <span className={`${prefixCls}-synthetic-ph-placeholder`} \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        style={{\r\n            visibility: placeholder && !value ? 'visible' : 'hidden',\r\n        }}>\n                {placeholder}\n              </span>\n            </span>\n          </div>\n          <input type=\"search\" className={`${prefixCls}-value`} value={value} disabled={disabled} placeholder={placeholder} onChange={this.onChange} onFocus={this.onFocus} onBlur={this.onBlur} ref={el => (this.inputRef = el)} maxLength={maxLength} {...getDataAttr(this.props)}/>\n          <TouchFeedback activeClassName={`${prefixCls}-clear-active`}>\n            <a onClick={this.onClear} className={clearCls}/>\n          </TouchFeedback>\n        </div>\n        <div className={cancelCls} onClick={this.onCancel} ref={el => (this.rightBtnRef = el)}>\n          {this.props.cancelText || cancelText}\n        </div>\n      </form>);\r\n    }\r\n}\r\nSearchBar.defaultProps = defaultProps;\r\nSearchBar.contextTypes = {\r\n    antLocale: PropTypes.object,\r\n};\r\n"}
