{"code":"/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nimport Button from '../button';\r\nimport Flex from '../flex';\r\nexport default class Pagination extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            current: props.current,\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.current !== this.state.current) {\r\n            this.setState({\r\n                current: nextProps.current,\r\n            });\r\n        }\r\n    }\r\n    onChange(p) {\r\n        this.setState({\r\n            current: p,\r\n        });\r\n        if (this.props.onChange) {\r\n            this.props.onChange(p);\r\n        }\r\n    }\r\n    render() {\r\n        const { prefixCls, className, style, mode, total, simple } = this.props;\r\n        const { current } = this.state;\r\n        const locale = getComponentLocale(this.props, this.context, 'Pagination', () => require('./locale/zh_CN'));\r\n        const { prevText, nextText } = locale;\r\n        let markup = (<Flex>\n        <Flex.Item className={`${prefixCls}-wrap-btn ${prefixCls}-wrap-btn-prev`}>\n          <Button inline disabled={current <= 1} onClick={() => this.onChange(current - 1)}>\n            {prevText}\n          </Button>\n        </Flex.Item>\n        {this.props.children ? (<Flex.Item>{this.props.children}</Flex.Item>) : (!simple && (<Flex.Item className={`${prefixCls}-wrap`} aria-live=\"assertive\">\n              <span className=\"active\">{current}</span>/<span>{total}</span>\n            </Flex.Item>))}\n        <Flex.Item className={`${prefixCls}-wrap-btn ${prefixCls}-wrap-btn-next`}>\n          <Button inline disabled={current >= total} onClick={() => this.onChange(this.state.current + 1)}>\n            {nextText}\n          </Button>\n        </Flex.Item>\n      </Flex>);\r\n        if (mode === 'number') {\r\n            markup = (<div className={`${prefixCls}-wrap`}>\n          <span className=\"active\">{current}</span>/<span>{total}</span>\n        </div>);\r\n        }\r\n        else if (mode === 'pointer') {\r\n            const arr = [];\r\n            for (let i = 0; i < total; i++) {\r\n                arr.push(<div key={`dot-${i}`} className={classnames(`${prefixCls}-wrap-dot`, {\r\n                    [`${prefixCls}-wrap-dot-active`]: i + 1 === current,\r\n                })}>\n            <span />\n          </div>);\r\n            }\r\n            markup = <div className={`${prefixCls}-wrap`}>{arr}</div>;\r\n        }\r\n        const cls = classnames(prefixCls, className);\r\n        return (<div className={cls} style={style}>\n        {markup}\n      </div>);\r\n    }\r\n}\r\nPagination.defaultProps = {\r\n    prefixCls: 'am-pagination',\r\n    mode: 'button',\r\n    current: 1,\r\n    total: 0,\r\n    simple: false,\r\n    onChange: () => { },\r\n};\r\nPagination.contextTypes = {\r\n    antLocale: PropTypes.object,\r\n};\r\n"}
