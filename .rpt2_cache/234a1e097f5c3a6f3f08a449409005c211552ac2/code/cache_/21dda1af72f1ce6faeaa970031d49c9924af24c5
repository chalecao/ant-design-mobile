{"code":"import * as tslib_1 from \"tslib\";\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nconst IS_IOS = /iphone|ipad|ipod/i.test(window.navigator.userAgent);\r\nexport class KeyboardItem extends React.Component {\r\n    render() {\r\n        const _a = this.props, { prefixCls, onClick, className, disabled, children, tdRef, label, iconOnly } = _a, restProps = tslib_1.__rest(_a, [\"prefixCls\", \"onClick\", \"className\", \"disabled\", \"children\", \"tdRef\", \"label\", \"iconOnly\"]);\r\n        let value = children;\r\n        if (className === 'keyboard-delete') {\r\n            value = 'delete';\r\n        }\r\n        else if (className === 'keyboard-hide') {\r\n            value = 'hide';\r\n        }\r\n        else if (className === 'keyboard-confirm') {\r\n            value = 'confirm';\r\n        }\r\n        const wrapCls = classnames(`${prefixCls}-item`, className);\r\n        return (<TouchFeedback activeClassName={`${prefixCls}-item-active`}>\n        <td ref={tdRef} \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        onClick={e => {\r\n            onClick(e, value);\r\n        }} className={wrapCls} {...restProps}>\n          {children}\n          {iconOnly && <i className=\"sr-only\">{label}</i>}\n        </td>\n      </TouchFeedback>);\r\n    }\r\n}\r\nKeyboardItem.defaultProps = {\r\n    prefixCls: 'am-number-keyboard',\r\n    onClick: () => { },\r\n    disabled: false,\r\n};\r\nclass CustomKeyboard extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onKeyboardClick = (e, value) => {\r\n            e.nativeEvent.stopImmediatePropagation();\r\n            if (value === 'confirm' && this.confirmDisabled) {\r\n                return null;\r\n            }\r\n            else {\r\n                if (this.linkedInput) {\r\n                    this.linkedInput.onKeyboardClick(value);\r\n                }\r\n            }\r\n        };\r\n        this.renderKeyboardItem = (item, index) => {\r\n            return (<KeyboardItem onClick={this.onKeyboardClick} key={`item-${item}-${index}`}>\n        {item}\n      </KeyboardItem>);\r\n        };\r\n    }\r\n    render() {\r\n        const { prefixCls, confirmLabel, backspaceLabel, cancelKeyboardLabel, wrapProps, } = this.props;\r\n        const wrapperCls = classnames(`${prefixCls}-wrapper`, `${prefixCls}-wrapper-hide`);\r\n        return (<div className={wrapperCls} ref={el => (this.antmKeyboard = el)} {...wrapProps}>\n        <table>\n          <tbody>\n            <tr>\n              {['1', '2', '3'].map((item, index) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderKeyboardItem(item, index))}\n              <KeyboardItem className=\"keyboard-delete\" rowSpan={2} onClick={this.onKeyboardClick} {...this.getAriaAttr(backspaceLabel)}/>\n            </tr>\n            <tr>\n              {['4', '5', '6'].map((item, index) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderKeyboardItem(item, index))}\n            </tr>\n            <tr>\n              {['7', '8', '9'].map((item, index) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderKeyboardItem(item, index))}\n              <KeyboardItem className=\"keyboard-confirm\" rowSpan={2} onClick={this.onKeyboardClick} tdRef={el => (this.confirmKeyboardItem = el)}>\n                {confirmLabel}\n              </KeyboardItem>\n            </tr>\n            <tr>\n              {['.', '0'].map((item, index) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderKeyboardItem(item, index))}\n              <KeyboardItem className=\"keyboard-hide\" onClick={this.onKeyboardClick} {...this.getAriaAttr(cancelKeyboardLabel)}/>\n            </tr>\n          </tbody>\n        </table>\n      </div>);\r\n    }\r\n    getAriaAttr(label) {\r\n        if (IS_IOS) {\r\n            return { label, iconOnly: true };\r\n        }\r\n        else {\r\n            return { role: 'button', 'aria-label': label };\r\n        }\r\n    }\r\n}\r\nCustomKeyboard.defaultProps = {\r\n    prefixCls: 'am-number-keyboard',\r\n};\r\nexport default CustomKeyboard;\r\n"}
