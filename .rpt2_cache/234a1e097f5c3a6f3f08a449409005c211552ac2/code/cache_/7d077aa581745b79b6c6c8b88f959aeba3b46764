{"code":"import * as tslib_1 from \"tslib\";\r\n/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nimport CustomInput from './CustomInput';\r\nimport Input from './Input';\r\nfunction noop() { }\r\nfunction normalizeValue(value) {\r\n    if (typeof value === 'undefined' || value === null) {\r\n        return '';\r\n    }\r\n    return value + '';\r\n}\r\nclass InputItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChange = (e) => {\r\n            const { value } = e.target;\r\n            const { type } = this.props;\r\n            let newValue = value;\r\n            switch (type) {\r\n                case 'bankCard':\r\n                    newValue = value.replace(/\\D/g, '').replace(/(....)(?=.)/g, '$1 ');\r\n                    break;\r\n                case 'phone':\r\n                    newValue = value.replace(/\\D/g, '').substring(0, 11);\r\n                    const valueLen = newValue.length;\r\n                    if (valueLen > 3 && valueLen < 8) {\r\n                        newValue = `${newValue.substr(0, 3)} ${newValue.substr(3)}`;\r\n                    }\r\n                    else if (valueLen >= 8) {\r\n                        newValue = `${newValue.substr(0, 3)} ${newValue.substr(3, 4)} ${newValue.substr(7)}`;\r\n                    }\r\n                    break;\r\n                case 'number':\r\n                    newValue = value.replace(/\\D/g, '');\r\n                    break;\r\n                case 'text':\r\n                case 'password':\r\n                default:\r\n                    break;\r\n            }\r\n            this.handleOnChange(newValue, newValue !== value);\r\n        };\r\n        this.handleOnChange = (value, isMutated = false) => {\r\n            const { onChange } = this.props;\r\n            if (!('value' in this.props)) {\r\n                this.setState({ value });\r\n            }\r\n            else {\r\n                this.setState({ value: this.props.value });\r\n            }\r\n            if (onChange) {\r\n                isMutated ? setTimeout(() => onChange(value)) : onChange(value);\r\n            }\r\n        };\r\n        this.onInputFocus = (value) => {\r\n            if (this.debounceTimeout) {\r\n                clearTimeout(this.debounceTimeout);\r\n                this.debounceTimeout = null;\r\n            }\r\n            this.setState({\r\n                focus: true,\r\n            });\r\n            if (this.props.onFocus) {\r\n                this.props.onFocus(value);\r\n            }\r\n        };\r\n        this.onInputBlur = (value) => {\r\n            if (this.inputRef) {\r\n                // this.inputRef may be null if customKeyboard unmount\r\n                this.debounceTimeout = setTimeout(() => {\r\n                    if (document.activeElement !== (this.inputRef && this.inputRef.inputRef)) {\r\n                        this.setState({\r\n                            focus: false,\r\n                        });\r\n                    }\r\n                }, 200);\r\n            }\r\n            if (this.props.onBlur) {\r\n                this.props.onBlur(value);\r\n            }\r\n        };\r\n        this.clearInput = () => {\r\n            if (this.props.type !== 'password' && this.props.updatePlaceholder) {\r\n                this.setState({\r\n                    placeholder: this.props.value,\r\n                });\r\n            }\r\n            this.setState({\r\n                value: '',\r\n            });\r\n            if (this.props.onChange) {\r\n                this.props.onChange('');\r\n            }\r\n            this.focus();\r\n        };\r\n        // this is instance method for user to use\r\n        this.focus = () => {\r\n            if (this.inputRef) {\r\n                this.inputRef.focus();\r\n            }\r\n        };\r\n        this.state = {\r\n            placeholder: props.placeholder,\r\n            value: normalizeValue(props.value || props.defaultValue),\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if ('placeholder' in nextProps && !nextProps.updatePlaceholder) {\r\n            this.setState({\r\n                placeholder: nextProps.placeholder,\r\n            });\r\n        }\r\n        if ('value' in nextProps) {\r\n            this.setState({\r\n                value: nextProps.value,\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.debounceTimeout) {\r\n            clearTimeout(this.debounceTimeout);\r\n            this.debounceTimeout = null;\r\n        }\r\n    }\r\n    render() {\r\n        const props = Object.assign({}, this.props);\r\n        delete props.updatePlaceholder;\r\n        const { prefixCls, prefixListCls, editable, style, clear, children, error, className, extra, labelNumber, type, onExtraClick, onErrorClick, moneyKeyboardAlign, moneyKeyboardWrapProps, onVirtualKeyboardConfirm } = props, restProps = tslib_1.__rest(props, [\"prefixCls\", \"prefixListCls\", \"editable\", \"style\", \"clear\", \"children\", \"error\", \"className\", \"extra\", \"labelNumber\", \"type\", \"onExtraClick\", \"onErrorClick\", \"moneyKeyboardAlign\", \"moneyKeyboardWrapProps\", \"onVirtualKeyboardConfirm\"]);\r\n        const { name, disabled, maxLength } = restProps;\r\n        const { value } = this.state;\r\n        // tslint:disable-next-line:variable-name\r\n        const _locale = getComponentLocale(this.props, this.context, 'InputItem', () => require('./locale/zh_CN'));\r\n        const { confirmLabel, backspaceLabel, cancelKeyboardLabel, } = _locale;\r\n        const { focus, placeholder, } = this.state;\r\n        const wrapCls = classnames(`${prefixListCls}-item`, `${prefixCls}-item`, `${prefixListCls}-item-middle`, className, {\r\n            [`${prefixCls}-disabled`]: disabled,\r\n            [`${prefixCls}-error`]: error,\r\n            [`${prefixCls}-focus`]: focus,\r\n            [`${prefixCls}-android`]: focus,\r\n        });\r\n        const labelCls = classnames(`${prefixCls}-label`, {\r\n            [`${prefixCls}-label-2`]: labelNumber === 2,\r\n            [`${prefixCls}-label-3`]: labelNumber === 3,\r\n            [`${prefixCls}-label-4`]: labelNumber === 4,\r\n            [`${prefixCls}-label-5`]: labelNumber === 5,\r\n            [`${prefixCls}-label-6`]: labelNumber === 6,\r\n            [`${prefixCls}-label-7`]: labelNumber === 7,\r\n        });\r\n        const controlCls = `${prefixCls}-control`;\r\n        let inputType = 'text';\r\n        if (type === 'bankCard' || type === 'phone') {\r\n            inputType = 'tel';\r\n        }\r\n        else if (type === 'password') {\r\n            inputType = 'password';\r\n        }\r\n        else if (type === 'digit') {\r\n            inputType = 'number';\r\n        }\r\n        else if (type !== 'text' && type !== 'number') {\r\n            inputType = type;\r\n        }\r\n        let patternProps;\r\n        if (type === 'number') {\r\n            patternProps = {\r\n                pattern: '[0-9]*',\r\n            };\r\n        }\r\n        let classNameProps;\r\n        if (type === 'digit') {\r\n            classNameProps = {\r\n                className: 'h5numInput',\r\n            };\r\n        }\r\n        return (<div className={wrapCls}>\n        <div className={`${prefixListCls}-line`}>\n          {children ? <div className={labelCls}>{children}</div> : null}\n          <div className={controlCls}>\n            {type === 'money' ? (<CustomInput value={normalizeValue(value)} type={type} ref={el => (this.inputRef = el)} maxLength={maxLength} placeholder={placeholder} onChange={this.onInputChange} onFocus={this.onInputFocus} onBlur={this.onInputBlur} onVirtualKeyboardConfirm={onVirtualKeyboardConfirm} disabled={disabled} editable={editable} prefixCls={prefixCls} style={style} confirmLabel={confirmLabel} backspaceLabel={backspaceLabel} cancelKeyboardLabel={cancelKeyboardLabel} moneyKeyboardAlign={moneyKeyboardAlign} moneyKeyboardWrapProps={moneyKeyboardWrapProps}/>) : (<Input {...patternProps} {...restProps} {...classNameProps} value={normalizeValue(value)} defaultValue={undefined} ref={(el) => (this.inputRef = el)} style={style} type={inputType} maxLength={maxLength} name={name} placeholder={placeholder} onChange={this.onInputChange} onFocus={this.onInputFocus} onBlur={this.onInputBlur} readOnly={!editable} disabled={disabled}/>)}\n          </div>\n          {clear &&\r\n            editable &&\r\n            !disabled &&\r\n            (value && `${value}`.length > 0) ? (<TouchFeedback activeClassName={`${prefixCls}-clear-active`}>\n              <div className={`${prefixCls}-clear`} onClick={this.clearInput}/>\n            </TouchFeedback>) : null}\n          {error ? (<div className={`${prefixCls}-error-extra`} onClick={onErrorClick}/>) : null}\n          {extra !== '' ? (<div className={`${prefixCls}-extra`} onClick={onExtraClick}>\n              {extra}\n            </div>) : null}\n        </div>\n      </div>);\r\n    }\r\n}\r\nInputItem.defaultProps = {\r\n    prefixCls: 'am-input',\r\n    prefixListCls: 'am-list',\r\n    type: 'text',\r\n    editable: true,\r\n    disabled: false,\r\n    placeholder: '',\r\n    clear: false,\r\n    onChange: noop,\r\n    onBlur: noop,\r\n    onFocus: noop,\r\n    extra: '',\r\n    onExtraClick: noop,\r\n    error: false,\r\n    onErrorClick: noop,\r\n    onVirtualKeyboardConfirm: noop,\r\n    labelNumber: 5,\r\n    updatePlaceholder: false,\r\n    moneyKeyboardAlign: 'right',\r\n    moneyKeyboardWrapProps: {},\r\n};\r\nInputItem.contextTypes = {\r\n    antLocale: PropTypes.object,\r\n};\r\nexport default InputItem;\r\n"}
