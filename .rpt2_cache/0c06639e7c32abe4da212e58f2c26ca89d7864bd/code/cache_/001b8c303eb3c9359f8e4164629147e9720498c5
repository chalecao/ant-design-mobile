{"code":"import React from 'react';\r\nimport getDataAttr from '../_util/getDataAttr';\r\nimport Tabs from '../tabs';\r\nimport Tab from './Tab';\r\nexport class Item extends React.Component {\r\n    render() {\r\n        const { prefixCls, style } = this.props;\r\n        return (<div className={prefixCls} style={style}>\n        {this.props.children}\n      </div>);\r\n    }\r\n}\r\nItem.defaultProps = {\r\n    prefixCls: 'am-tab-bar-item',\r\n    title: '',\r\n};\r\nclass AntTabBar extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getTabs = () => {\r\n            return React.Children.map(this.props.children, (c) => {\r\n                return Object.assign({}, c.props);\r\n            });\r\n        };\r\n        this.renderTabBar = () => {\r\n            const { barTintColor, prefixCls, tintColor, unselectedTintColor, hidden, } = this.props;\r\n            const tabsData = this.getTabs();\r\n            const content = tabsData.map((cProps, index) => {\r\n                return (<Tab key={index} prefixCls={`${this.props.prefixCls}-tab`} badge={cProps.badge} dot={cProps.dot} selected={cProps.selected} icon={cProps.icon} selectedIcon={cProps.selectedIcon} title={cProps.title} tintColor={tintColor} unselectedTintColor={unselectedTintColor} dataAttrs={getDataAttr(cProps)} onClick={() => cProps.onPress && cProps.onPress()}/>);\r\n            });\r\n            let cls = `${prefixCls}-bar`;\r\n            if (hidden) {\r\n                cls += ` ${prefixCls}-bar-hidden`;\r\n            }\r\n            return (<div className={cls} style={{ backgroundColor: barTintColor }}>\n        {content}\n      </div>);\r\n        };\r\n    }\r\n    render() {\r\n        const { prefixCls, children, animated, swipeable, noRenderContent, prerenderingSiblingsNumber, } = this.props;\r\n        const tabs = this.getTabs();\r\n        let activeIndex = 0;\r\n        tabs.forEach((tab, index) => {\r\n            if (tab.selected) {\r\n                activeIndex = index;\r\n            }\r\n        });\r\n        return (<div className={prefixCls}>\n        <Tabs tabs={tabs} renderTabBar={this.renderTabBar} tabBarPosition=\"bottom\" page={activeIndex < 0 ? undefined : activeIndex} animated={animated} swipeable={swipeable} noRenderContent={noRenderContent} prerenderingSiblingsNumber={prerenderingSiblingsNumber}>\n          {children}\n        </Tabs>\n      </div>);\r\n    }\r\n}\r\nAntTabBar.defaultProps = {\r\n    prefixCls: 'am-tab-bar',\r\n    barTintColor: 'white',\r\n    tintColor: '#108ee9',\r\n    hidden: false,\r\n    unselectedTintColor: '#888',\r\n    placeholder: '正在加载',\r\n    animated: false,\r\n    swipeable: false,\r\n    prerenderingSiblingsNumber: 1,\r\n};\r\nAntTabBar.Item = Item;\r\nexport default AntTabBar;\r\n"}
