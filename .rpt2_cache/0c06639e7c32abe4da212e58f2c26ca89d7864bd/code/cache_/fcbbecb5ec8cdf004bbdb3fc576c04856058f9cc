{"code":"import React from 'react';\r\nimport RcSteps from 'rmc-steps';\r\nimport Icon from '../icon';\r\nexport default class Steps extends React.Component {\r\n    componentDidMount() {\r\n        this.componentDidUpdate();\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.direction !== 'horizontal') {\r\n            return;\r\n        }\r\n        // set tail's left position based on main's width for each step dynamically.\r\n        this.stepRefs.forEach(s => {\r\n            if (s.refs.tail) {\r\n                s.refs.tail.style.left = `${s.refs.main.offsetWidth / 2}px`;\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        this.stepRefs = [];\r\n        const { children, status, size } = this.props;\r\n        const current = this.props.current;\r\n        // flattern the array at first https://github.com/ant-design/ant-design-mobile/issues/934\r\n        const filterChildren = [];\r\n        if (children && children.length) {\r\n            children.forEach((item) => {\r\n                if (React.isValidElement(item)) {\r\n                    filterChildren.push(item);\r\n                }\r\n            });\r\n        }\r\n        const newChildren = React.Children.map(filterChildren, (item, index) => {\r\n            let className = item.props.className;\r\n            if (index < filterChildren.length - 1 &&\r\n                filterChildren[index + 1].props.status === 'error') {\r\n                className = className ? `${className} error-tail` : 'error-tail';\r\n            }\r\n            let icon = item.props.icon;\r\n            if (!icon) {\r\n                if (index < current) {\r\n                    // 对应 state: finish\r\n                    icon = 'check-circle-o';\r\n                }\r\n                else if (index > current) {\r\n                    // 对应 state: wait\r\n                    icon = 'ellipsis';\r\n                    className = className\r\n                        ? `${className} ellipsis-item`\r\n                        : 'ellipsis-item';\r\n                }\r\n                if ((status === 'error' && index === current) ||\r\n                    item.props.status === 'error') {\r\n                    icon = 'cross-circle-o';\r\n                }\r\n            }\r\n            icon =\r\n                typeof icon === 'string' ? (<Icon type={icon} size={size === 'small' ? (status === 'wait' ? 'xxs' : 'xs') : 'md'}/>) : (icon);\r\n            return React.cloneElement(item, {\r\n                icon,\r\n                className,\r\n                ref: (c) => (this.stepRefs[index] = c),\r\n            });\r\n        });\r\n        return (<RcSteps ref={(el) => (this.stepsRef = el)} {...this.props}>\n        {newChildren}\n      </RcSteps>);\r\n    }\r\n}\r\nSteps.Step = RcSteps.Step;\r\nSteps.defaultProps = {\r\n    prefixCls: 'am-steps',\r\n    iconPrefix: 'ant',\r\n    labelPlacement: 'vertical',\r\n    direction: 'vertical',\r\n    current: 0,\r\n};\r\n"}
