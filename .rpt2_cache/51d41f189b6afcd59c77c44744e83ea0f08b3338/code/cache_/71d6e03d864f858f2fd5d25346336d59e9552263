{"code":"import React from 'react';\r\nimport { ActionSheetIOS, Platform, Share, } from 'react-native';\r\nimport topView from 'rn-topview';\r\nimport ActionSheetAndroidContainer from './AndroidContainer.native';\r\nlet instance;\r\nconst onAnimationEnd = (visible) => {\r\n    if (!visible) {\r\n        topView.remove();\r\n    }\r\n};\r\nexport default {\r\n    showActionSheetWithOptions(config, callback) {\r\n        if (Platform.OS === 'ios') {\r\n            ActionSheetIOS.showActionSheetWithOptions(config, callback);\r\n        }\r\n        else {\r\n            topView.set(<ActionSheetAndroidContainer visible ref={ref => (instance = ref)} onAnimationEnd={onAnimationEnd} config={config} callback={callback}/>);\r\n        }\r\n    },\r\n    showShareActionSheetWithOptions(config, failureCallback, successCallback) {\r\n        const content = {};\r\n        const options = {};\r\n        content.message = config.message;\r\n        if (config.title) {\r\n            content.title = config.title;\r\n            options.dialogTitle = config.title;\r\n        }\r\n        if (config.url) {\r\n            content.url = config.url;\r\n        }\r\n        if (config.excludedActivityTypes) {\r\n            options.excludedActivityTypes = config.excludedActivityTypes;\r\n        }\r\n        if (config.tintColor) {\r\n            options.tintColor = config.tintColor;\r\n        }\r\n        // promise is not called in Android\r\n        // https://github.com/facebook/react-native/blob/master/Libraries/Share/Share.js#L80\r\n        Share.share(content, options)\r\n            .then((result) => {\r\n            if (result.action === Share.sharedAction) {\r\n                // completed successCallback(completed, method)\r\n                if (successCallback) {\r\n                    successCallback(true, result.activityType);\r\n                }\r\n            }\r\n            else if (result.action === Share.dismissedAction) {\r\n                if (successCallback) {\r\n                    successCallback(false);\r\n                }\r\n            }\r\n        })\r\n            .catch(error => {\r\n            if (failureCallback) {\r\n                failureCallback(error);\r\n            }\r\n        });\r\n    },\r\n    close() {\r\n        if (instance) {\r\n            instance.close();\r\n        }\r\n    },\r\n};\r\n"}
