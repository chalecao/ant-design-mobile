{"code":"import * as tslib_1 from \"tslib\";\r\n/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport Carousel from '../carousel';\r\nimport Flex from '../flex';\r\nexport default class Grid extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            initialSlideWidth: 0,\r\n        };\r\n        this.renderCarousel = (rowsArr, pageCount, rowCount) => {\r\n            const { prefixCls } = this.props;\r\n            const carouselMaxRow = this.props.carouselMaxRow;\r\n            const pagesArr = [];\r\n            for (let pageIndex = 0; pageIndex < pageCount; pageIndex++) {\r\n                const pageRows = [];\r\n                for (let ii = 0; ii < carouselMaxRow; ii++) {\r\n                    const rowIndex = pageIndex * carouselMaxRow + ii;\r\n                    if (rowIndex < rowCount) {\r\n                        pageRows.push(rowsArr[rowIndex]);\r\n                    }\r\n                    else {\r\n                        // 空节点为了确保末尾页的最后未到底的行有底线(样式中last-child会没线)\r\n                        pageRows.push(React.createElement(\"div\", { key: `gridline-${rowIndex}` }));\r\n                    }\r\n                }\r\n                pagesArr.push(React.createElement(\"div\", { key: `pageitem-${pageIndex}`, className: `${prefixCls}-carousel-page` }, pageRows));\r\n            }\r\n            return pagesArr;\r\n        };\r\n        this.renderItem = (dataItem, index, columnNum, renderItem) => {\r\n            const { prefixCls } = this.props;\r\n            let itemEl = null;\r\n            if (renderItem) {\r\n                itemEl = renderItem(dataItem, index);\r\n            }\r\n            else {\r\n                if (dataItem) {\r\n                    const { icon, text } = dataItem;\r\n                    itemEl = (React.createElement(\"div\", { className: `${prefixCls}-item-inner-content column-num-${columnNum}` },\r\n                        React.isValidElement(icon) ? (icon) : (React.createElement(\"img\", { className: `${prefixCls}-icon`, src: icon })),\r\n                        React.createElement(\"div\", { className: `${prefixCls}-text` }, text)));\r\n                }\r\n            }\r\n            return React.createElement(\"div\", { className: `${prefixCls}-item-content` }, itemEl);\r\n        };\r\n        this.getRows = (rowCount, dataLength) => {\r\n            // tslint:disable:prefer-const\r\n            let { columnNum, data, renderItem, prefixCls, onClick, activeStyle, activeClassName, itemStyle, } = this.props;\r\n            const rowsArr = [];\r\n            columnNum = columnNum;\r\n            const rowWidth = `${100 / columnNum}%`;\r\n            const colStyle = Object.assign({ width: rowWidth }, itemStyle);\r\n            for (let i = 0; i < rowCount; i++) {\r\n                const rowArr = [];\r\n                for (let j = 0; j < columnNum; j++) {\r\n                    const dataIndex = i * columnNum + j;\r\n                    let itemEl;\r\n                    if (dataIndex < dataLength) {\r\n                        const el = data && data[dataIndex];\r\n                        itemEl = (React.createElement(TouchFeedback, { key: `griditem-${dataIndex}`, activeClassName: activeClassName ? activeClassName : `${prefixCls}-item-active`, activeStyle: activeStyle },\r\n                            React.createElement(Flex.Item, { className: `${prefixCls}-item`, onClick: () => onClick && onClick(el, dataIndex), style: colStyle }, this.renderItem(el, dataIndex, columnNum, renderItem))));\r\n                    }\r\n                    else {\r\n                        itemEl = (React.createElement(Flex.Item, { key: `griditem-${dataIndex}`, className: `${prefixCls}-item ${prefixCls}-null-item`, style: colStyle }));\r\n                    }\r\n                    rowArr.push(itemEl);\r\n                }\r\n                rowsArr.push(React.createElement(Flex, { justify: \"center\", align: \"stretch\", key: `gridline-${i}` }, rowArr));\r\n            }\r\n            return rowsArr;\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            initialSlideWidth: document.documentElement.clientWidth,\r\n        });\r\n    }\r\n    render() {\r\n        const _a = this.props, { prefixCls, className, data, hasLine, isCarousel, square, activeStyle, activeClassName } = _a, restProps = tslib_1.__rest(_a, [\"prefixCls\", \"className\", \"data\", \"hasLine\", \"isCarousel\", \"square\", \"activeStyle\", \"activeClassName\"]);\r\n        let { columnNum, carouselMaxRow, onClick, renderItem } = restProps, restPropsForCarousel = tslib_1.__rest(restProps, [\"columnNum\", \"carouselMaxRow\", \"onClick\", \"renderItem\"]);\r\n        const { initialSlideWidth } = this.state;\r\n        columnNum = columnNum;\r\n        carouselMaxRow = carouselMaxRow;\r\n        const dataLength = (data && data.length) || 0;\r\n        let rowCount = Math.ceil(dataLength / columnNum);\r\n        let rowsArr;\r\n        let renderEl;\r\n        if (isCarousel) {\r\n            if (initialSlideWidth < 0) {\r\n                // carousel  server render. because carousel dependes on document\r\n                return null;\r\n            }\r\n            if (rowCount % carouselMaxRow !== 0) {\r\n                rowCount = rowCount + carouselMaxRow - rowCount % carouselMaxRow;\r\n            }\r\n            const pageCount = Math.ceil(rowCount / carouselMaxRow);\r\n            rowsArr = this.getRows(rowCount, dataLength);\r\n            let carouselProps = {};\r\n            if (pageCount <= 1) {\r\n                carouselProps = {\r\n                    dots: false,\r\n                    dragging: false,\r\n                    swiping: false,\r\n                };\r\n            }\r\n            renderEl = (React.createElement(Carousel, Object.assign({ initialSlideWidth: initialSlideWidth }, restPropsForCarousel, carouselProps), this.renderCarousel(rowsArr, pageCount, rowCount)));\r\n        }\r\n        else {\r\n            rowsArr = this.getRows(rowCount, dataLength);\r\n            renderEl = rowsArr;\r\n        }\r\n        const cls = classnames(prefixCls, className, {\r\n            [`${prefixCls}-square`]: square,\r\n            [`${prefixCls}-line`]: hasLine,\r\n            [`${prefixCls}-carousel`]: isCarousel,\r\n        });\r\n        return React.createElement(\"div\", { className: cls }, renderEl);\r\n    }\r\n}\r\nGrid.defaultProps = {\r\n    data: [],\r\n    hasLine: true,\r\n    isCarousel: false,\r\n    columnNum: 4,\r\n    carouselMaxRow: 2,\r\n    prefixCls: 'am-grid',\r\n    square: true,\r\n    itemStyle: {},\r\n};\r\n"}
