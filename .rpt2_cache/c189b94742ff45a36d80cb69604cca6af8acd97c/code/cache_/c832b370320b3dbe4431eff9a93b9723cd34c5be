{"code":"import * as tslib_1 from \"tslib\";\r\n/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nfunction noop() { }\r\nfunction fixControlledValue(value) {\r\n    if (typeof value === 'undefined' || value === null) {\r\n        return '';\r\n    }\r\n    return value;\r\n}\r\nconst regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\n/g;\r\nfunction countSymbols(text = '') {\r\n    return text.replace(regexAstralSymbols, '_').length;\r\n}\r\nexport default class TextareaItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.focus = () => {\r\n            this.textareaRef.focus();\r\n        };\r\n        this.reAlignHeight = () => {\r\n            const textareaDom = this.textareaRef;\r\n            textareaDom.style.height = ''; // 字数减少时能自动减小高度\r\n            textareaDom.style.height = `${textareaDom.scrollHeight}px`;\r\n        };\r\n        this.onChange = (e) => {\r\n            const value = e.target.value;\r\n            if ('value' in this.props) {\r\n                this.setState({ value: this.props.value });\r\n            }\r\n            else {\r\n                this.setState({ value });\r\n            }\r\n            const { onChange } = this.props;\r\n            if (onChange) {\r\n                onChange(value);\r\n            }\r\n            // 设置 defaultValue 时，用户输入不会触发 componentDidUpdate ，此处手工调用\r\n            this.componentDidUpdate();\r\n        };\r\n        this.onBlur = (e) => {\r\n            this.debounceTimeout = setTimeout(() => {\r\n                if (document.activeElement !== this.textareaRef) {\r\n                    this.setState({\r\n                        focus: false,\r\n                    });\r\n                }\r\n            }, 100);\r\n            const value = e.currentTarget.value;\r\n            if (this.props.onBlur) {\r\n                this.props.onBlur(value);\r\n            }\r\n        };\r\n        this.onFocus = (e) => {\r\n            if (this.debounceTimeout) {\r\n                clearTimeout(this.debounceTimeout);\r\n                this.debounceTimeout = null;\r\n            }\r\n            this.setState({\r\n                focus: true,\r\n            });\r\n            const value = e.currentTarget.value;\r\n            if (this.props.onFocus) {\r\n                this.props.onFocus(value);\r\n            }\r\n        };\r\n        this.onErrorClick = () => {\r\n            if (this.props.onErrorClick) {\r\n                this.props.onErrorClick();\r\n            }\r\n        };\r\n        this.clearInput = () => {\r\n            this.setState({\r\n                value: '',\r\n            });\r\n            if (this.props.onChange) {\r\n                this.props.onChange('');\r\n            }\r\n        };\r\n        this.state = {\r\n            focus: false,\r\n            value: props.value || props.defaultValue || '',\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if ('value' in nextProps) {\r\n            this.setState({\r\n                value: fixControlledValue(nextProps.value),\r\n            });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.autoHeight) {\r\n            this.reAlignHeight();\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.autoHeight && this.state.focus) {\r\n            this.reAlignHeight();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.debounceTimeout) {\r\n            clearTimeout(this.debounceTimeout);\r\n            this.debounceTimeout = null;\r\n        }\r\n    }\r\n    render() {\r\n        const _a = this.props, { prefixCls, prefixListCls, editable, style, clear, children, error, className, count, labelNumber, title, onErrorClick, autoHeight, defaultValue } = _a, otherProps = tslib_1.__rest(_a, [\"prefixCls\", \"prefixListCls\", \"editable\", \"style\", \"clear\", \"children\", \"error\", \"className\", \"count\", \"labelNumber\", \"title\", \"onErrorClick\", \"autoHeight\", \"defaultValue\"]);\r\n        const { disabled } = otherProps;\r\n        const { value, focus } = this.state;\r\n        const hasCount = count > 0 && this.props.rows > 1;\r\n        const wrapCls = classnames(className, `${prefixListCls}-item`, `${prefixCls}-item`, {\r\n            [`${prefixCls}-disabled`]: disabled,\r\n            [`${prefixCls}-item-single-line`]: this.props.rows === 1 && !autoHeight,\r\n            [`${prefixCls}-error`]: error,\r\n            [`${prefixCls}-focus`]: focus,\r\n            [`${prefixCls}-has-count`]: hasCount,\r\n        });\r\n        const labelCls = classnames(`${prefixCls}-label`, {\r\n            [`${prefixCls}-label-2`]: labelNumber === 2,\r\n            [`${prefixCls}-label-3`]: labelNumber === 3,\r\n            [`${prefixCls}-label-4`]: labelNumber === 4,\r\n            [`${prefixCls}-label-5`]: labelNumber === 5,\r\n            [`${prefixCls}-label-6`]: labelNumber === 6,\r\n            [`${prefixCls}-label-7`]: labelNumber === 7,\r\n        });\r\n        const characterLength = countSymbols(value);\r\n        const lengthCtrlProps = {};\r\n        if (count > 0) {\r\n            lengthCtrlProps.maxLength =\r\n                count - characterLength + (value ? value.length : 0);\r\n        }\r\n        return (React.createElement(\"div\", { className: wrapCls },\r\n            title && React.createElement(\"div\", { className: labelCls }, title),\r\n            React.createElement(\"div\", { className: `${prefixCls}-control` },\r\n                React.createElement(\"textarea\", Object.assign({ ref: el => (this.textareaRef = el) }, lengthCtrlProps, otherProps, { value: value, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, readOnly: !editable, style: style }))),\r\n            clear &&\r\n                editable &&\r\n                value &&\r\n                characterLength > 0 && (React.createElement(TouchFeedback, { activeClassName: `${prefixCls}-clear-active` },\r\n                React.createElement(\"div\", { className: `${prefixCls}-clear`, onClick: this.clearInput }))),\r\n            error && (React.createElement(\"div\", { className: `${prefixCls}-error-extra`, onClick: this.onErrorClick })),\r\n            hasCount && (React.createElement(\"span\", { className: `${prefixCls}-count` },\r\n                React.createElement(\"span\", null, value ? characterLength : 0),\r\n                \"/\",\r\n                count))));\r\n    }\r\n}\r\nTextareaItem.defaultProps = {\r\n    prefixCls: 'am-textarea',\r\n    prefixListCls: 'am-list',\r\n    autoHeight: false,\r\n    editable: true,\r\n    disabled: false,\r\n    placeholder: '',\r\n    clear: false,\r\n    rows: 1,\r\n    onChange: noop,\r\n    onBlur: noop,\r\n    onFocus: noop,\r\n    onErrorClick: noop,\r\n    error: false,\r\n    labelNumber: 5,\r\n};\r\n"}
