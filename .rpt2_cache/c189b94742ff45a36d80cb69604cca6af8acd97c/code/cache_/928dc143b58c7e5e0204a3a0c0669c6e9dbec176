{"code":"import * as tslib_1 from \"tslib\";\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport Dialog from 'rmc-dialog';\r\nimport TouchFeedback from 'rmc-feedback';\r\nexport class ModalComponent extends React.Component {\r\n}\r\nexport default class Modal extends ModalComponent {\r\n    renderFooterButton(button, prefixCls, i) {\r\n        let buttonStyle = {};\r\n        if (button.style) {\r\n            buttonStyle = button.style;\r\n            if (typeof buttonStyle === 'string') {\r\n                const styleMap = {\r\n                    cancel: {},\r\n                    default: {},\r\n                    destructive: { color: 'red' },\r\n                };\r\n                buttonStyle = styleMap[buttonStyle] || {};\r\n            }\r\n        }\r\n        const onClickFn = (e) => {\r\n            e.preventDefault();\r\n            if (button.onPress) {\r\n                button.onPress();\r\n            }\r\n        };\r\n        return (React.createElement(TouchFeedback, { activeClassName: `${prefixCls}-button-active`, key: i },\r\n            React.createElement(\"a\", { className: `${prefixCls}-button`, role: \"button\", style: buttonStyle, onClick: onClickFn }, button.text || `Button`)));\r\n    }\r\n    render() {\r\n        const _a = this.props, { prefixCls, className, wrapClassName, transitionName, maskTransitionName, style, platform, footer = [], operation, animated, transparent, popup, animationType } = _a, restProps = tslib_1.__rest(_a, [\"prefixCls\", \"className\", \"wrapClassName\", \"transitionName\", \"maskTransitionName\", \"style\", \"platform\", \"footer\", \"operation\", \"animated\", \"transparent\", \"popup\", \"animationType\"]);\r\n        const btnGroupClass = classnames(`${prefixCls}-button-group-${footer.length === 2 && !operation ? 'h' : 'v'}`, `${prefixCls}-button-group-${operation ? 'operation' : 'normal'}`);\r\n        const footerDom = footer.length ? (React.createElement(\"div\", { className: btnGroupClass, role: \"group\" }, footer.map((button, i) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderFooterButton(button, prefixCls, i)))) : null;\r\n        let transName;\r\n        let maskTransName;\r\n        if (animated) {\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            if (transparent) {\r\n                transName = maskTransName = 'am-fade';\r\n            }\r\n            else {\r\n                transName = maskTransName = 'am-slide-up';\r\n            }\r\n            if (popup) {\r\n                transName =\r\n                    animationType === 'slide-up' ? 'am-slide-up' : 'am-slide-down';\r\n                maskTransName = 'am-fade';\r\n            }\r\n        }\r\n        const wrapCls = classnames(wrapClassName, {\r\n            [`${prefixCls}-wrap-popup`]: popup,\r\n        });\r\n        const cls = classnames(className, {\r\n            [`${prefixCls}-transparent`]: transparent,\r\n            [`${prefixCls}-popup`]: popup,\r\n            [`${prefixCls}-popup-${animationType}`]: popup && animationType,\r\n            [`${prefixCls}-android`]: platform === 'android',\r\n        });\r\n        return (React.createElement(Dialog, Object.assign({}, restProps, { prefixCls: prefixCls, className: cls, wrapClassName: wrapCls, transitionName: transitionName || transName, maskTransitionName: maskTransitionName || maskTransName, style: style, footer: footerDom })));\r\n    }\r\n}\r\nModal.defaultProps = {\r\n    prefixCls: 'am-modal',\r\n    transparent: false,\r\n    popup: false,\r\n    animationType: 'slide-down',\r\n    animated: true,\r\n    style: {},\r\n    onShow() { },\r\n    footer: [],\r\n    closable: false,\r\n    operation: false,\r\n    platform: 'ios',\r\n};\r\n"}
