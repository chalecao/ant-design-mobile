{"code":"/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nimport Button from '../button';\r\nimport Flex from '../flex';\r\nexport default class Pagination extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            current: props.current,\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.current !== this.state.current) {\r\n            this.setState({\r\n                current: nextProps.current,\r\n            });\r\n        }\r\n    }\r\n    onChange(p) {\r\n        this.setState({\r\n            current: p,\r\n        });\r\n        if (this.props.onChange) {\r\n            this.props.onChange(p);\r\n        }\r\n    }\r\n    render() {\r\n        const { prefixCls, className, style, mode, total, simple } = this.props;\r\n        const { current } = this.state;\r\n        const locale = getComponentLocale(this.props, this.context, 'Pagination', () => require('./locale/zh_CN'));\r\n        const { prevText, nextText } = locale;\r\n        let markup = (React.createElement(Flex, null,\r\n            React.createElement(Flex.Item, { className: `${prefixCls}-wrap-btn ${prefixCls}-wrap-btn-prev` },\r\n                React.createElement(Button, { inline: true, disabled: current <= 1, onClick: () => this.onChange(current - 1) }, prevText)),\r\n            this.props.children ? (React.createElement(Flex.Item, null, this.props.children)) : (!simple && (React.createElement(Flex.Item, { className: `${prefixCls}-wrap`, \"aria-live\": \"assertive\" },\r\n                React.createElement(\"span\", { className: \"active\" }, current),\r\n                \"/\",\r\n                React.createElement(\"span\", null, total)))),\r\n            React.createElement(Flex.Item, { className: `${prefixCls}-wrap-btn ${prefixCls}-wrap-btn-next` },\r\n                React.createElement(Button, { inline: true, disabled: current >= total, onClick: () => this.onChange(this.state.current + 1) }, nextText))));\r\n        if (mode === 'number') {\r\n            markup = (React.createElement(\"div\", { className: `${prefixCls}-wrap` },\r\n                React.createElement(\"span\", { className: \"active\" }, current),\r\n                \"/\",\r\n                React.createElement(\"span\", null, total)));\r\n        }\r\n        else if (mode === 'pointer') {\r\n            const arr = [];\r\n            for (let i = 0; i < total; i++) {\r\n                arr.push(React.createElement(\"div\", { key: `dot-${i}`, className: classnames(`${prefixCls}-wrap-dot`, {\r\n                        [`${prefixCls}-wrap-dot-active`]: i + 1 === current,\r\n                    }) },\r\n                    React.createElement(\"span\", null)));\r\n            }\r\n            markup = React.createElement(\"div\", { className: `${prefixCls}-wrap` }, arr);\r\n        }\r\n        const cls = classnames(prefixCls, className);\r\n        return (React.createElement(\"div\", { className: cls, style: style }, markup));\r\n    }\r\n}\r\nPagination.defaultProps = {\r\n    prefixCls: 'am-pagination',\r\n    mode: 'button',\r\n    current: 1,\r\n    total: 0,\r\n    simple: false,\r\n    onChange: () => { },\r\n};\r\nPagination.contextTypes = {\r\n    antLocale: PropTypes.object,\r\n};\r\n"}
