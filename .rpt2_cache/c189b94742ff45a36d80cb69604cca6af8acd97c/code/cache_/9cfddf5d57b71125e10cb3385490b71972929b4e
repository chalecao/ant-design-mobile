{"code":"import * as tslib_1 from \"tslib\";\r\n/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nexport class Brief extends React.Component {\r\n    render() {\r\n        return (React.createElement(\"div\", { className: \"am-list-brief\" }, this.props.children));\r\n    }\r\n}\r\nclass ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = (ev) => {\r\n            const { onClick, platform } = this.props;\r\n            const isAndroid = platform === 'android';\r\n            if (!!onClick && isAndroid) {\r\n                if (this.debounceTimeout) {\r\n                    clearTimeout(this.debounceTimeout);\r\n                    this.debounceTimeout = null;\r\n                }\r\n                const Item = ev.currentTarget;\r\n                const RippleWidth = Math.max(Item.offsetHeight, Item.offsetWidth);\r\n                const ClientRect = ev.currentTarget.getBoundingClientRect();\r\n                const pointX = ev.clientX - ClientRect.left - Item.offsetWidth / 2;\r\n                const pointY = ev.clientY - ClientRect.top - Item.offsetWidth / 2;\r\n                const coverRippleStyle = {\r\n                    width: `${RippleWidth}px`,\r\n                    height: `${RippleWidth}px`,\r\n                    left: `${pointX}px`,\r\n                    top: `${pointY}px`,\r\n                };\r\n                this.setState({\r\n                    coverRippleStyle,\r\n                    RippleClicked: true,\r\n                }, () => {\r\n                    this.debounceTimeout = setTimeout(() => {\r\n                        this.setState({\r\n                            coverRippleStyle: { display: 'none' },\r\n                            RippleClicked: false,\r\n                        });\r\n                    }, 1000);\r\n                });\r\n            }\r\n            if (onClick) {\r\n                onClick(ev);\r\n            }\r\n        };\r\n        this.state = {\r\n            coverRippleStyle: { display: 'none' },\r\n            RippleClicked: false,\r\n        };\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.debounceTimeout) {\r\n            clearTimeout(this.debounceTimeout);\r\n            this.debounceTimeout = null;\r\n        }\r\n    }\r\n    render() {\r\n        const _a = this.props, { prefixCls, className, activeStyle, error, align, wrap, disabled, children, multipleLine, thumb, extra, arrow, onClick } = _a, restProps = tslib_1.__rest(_a, [\"prefixCls\", \"className\", \"activeStyle\", \"error\", \"align\", \"wrap\", \"disabled\", \"children\", \"multipleLine\", \"thumb\", \"extra\", \"arrow\", \"onClick\"]);\r\n        const { platform } = restProps, otherProps = tslib_1.__rest(restProps, [\"platform\"]);\r\n        const { coverRippleStyle, RippleClicked } = this.state;\r\n        const wrapCls = classnames(`${prefixCls}-item`, className, {\r\n            [`${prefixCls}-item-disabled`]: disabled,\r\n            [`${prefixCls}-item-error`]: error,\r\n            [`${prefixCls}-item-top`]: align === 'top',\r\n            [`${prefixCls}-item-middle`]: align === 'middle',\r\n            [`${prefixCls}-item-bottom`]: align === 'bottom',\r\n        });\r\n        const rippleCls = classnames(`${prefixCls}-ripple`, {\r\n            [`${prefixCls}-ripple-animate`]: RippleClicked,\r\n        });\r\n        const lineCls = classnames(`${prefixCls}-line`, {\r\n            [`${prefixCls}-line-multiple`]: multipleLine,\r\n            [`${prefixCls}-line-wrap`]: wrap,\r\n        });\r\n        const arrowCls = classnames(`${prefixCls}-arrow`, {\r\n            [`${prefixCls}-arrow-horizontal`]: arrow === 'horizontal',\r\n            [`${prefixCls}-arrow-vertical`]: arrow === 'down' || arrow === 'up',\r\n            [`${prefixCls}-arrow-vertical-up`]: arrow === 'up',\r\n        });\r\n        const content = (React.createElement(\"div\", Object.assign({}, otherProps, { onClick: ev => {\r\n                this.onClick(ev);\r\n            }, className: wrapCls }),\r\n            thumb ? (React.createElement(\"div\", { className: `${prefixCls}-thumb` }, typeof thumb === 'string' ? React.createElement(\"img\", { src: thumb }) : thumb)) : null,\r\n            React.createElement(\"div\", { className: lineCls },\r\n                children !== undefined && (React.createElement(\"div\", { className: `${prefixCls}-content` }, children)),\r\n                extra !== undefined && (React.createElement(\"div\", { className: `${prefixCls}-extra` }, extra)),\r\n                arrow && React.createElement(\"div\", { className: arrowCls, \"aria-hidden\": \"true\" })),\r\n            React.createElement(\"div\", { style: coverRippleStyle, className: rippleCls })));\r\n        const touchProps = {};\r\n        Object.keys(otherProps).forEach(key => {\r\n            if (/onTouch/i.test(key)) {\r\n                touchProps[key] = otherProps[key];\r\n                delete otherProps[key];\r\n            }\r\n        });\r\n        return (React.createElement(TouchFeedback, Object.assign({}, touchProps, { disabled: disabled || !onClick, activeStyle: activeStyle, activeClassName: `${prefixCls}-item-active` }), content));\r\n    }\r\n}\r\nListItem.defaultProps = {\r\n    prefixCls: 'am-list',\r\n    align: 'middle',\r\n    error: false,\r\n    multipleLine: false,\r\n    wrap: false,\r\n    platform: 'ios',\r\n};\r\nListItem.Brief = Brief;\r\nexport default ListItem;\r\n"}
