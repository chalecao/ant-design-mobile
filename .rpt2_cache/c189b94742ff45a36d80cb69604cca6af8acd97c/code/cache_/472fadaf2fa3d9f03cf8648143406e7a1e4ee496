{"code":"/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport Button from '../button';\r\nimport Flex from '../flex';\r\nimport List from '../list';\r\nimport SubMenu from './SubMenu';\r\nexport default class Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onMenuOk = () => {\r\n            const { onOk } = this.props;\r\n            if (onOk) {\r\n                onOk(this.state.value);\r\n            }\r\n        };\r\n        this.onMenuCancel = () => {\r\n            const { onCancel } = this.props;\r\n            if (onCancel) {\r\n                onCancel();\r\n            }\r\n        };\r\n        this.onClickFirstLevelItem = (dataItem) => {\r\n            const { onChange } = this.props;\r\n            this.setState({\r\n                firstLevelSelectValue: dataItem.value,\r\n            });\r\n            if (dataItem.isLeaf && onChange) {\r\n                onChange([dataItem.value]);\r\n            }\r\n        };\r\n        this.getSelectValue = (dataItem) => {\r\n            const { level, multiSelect } = this.props;\r\n            if (multiSelect) {\r\n                const { value, firstLevelSelectValue } = this.state;\r\n                if (value && value.length > 0) {\r\n                    if (level === 2 && value[0] !== firstLevelSelectValue) {\r\n                        /* if level is 2, when first level is reselect, reset submenu array */\r\n                        return [firstLevelSelectValue, [dataItem.value]];\r\n                    }\r\n                    else {\r\n                        /* if level is 1, or first level isn't changed when level is 2, just do add or delete for submenu array  */\r\n                        const chosenValues = level === 2 ? value[1] : value; // FIXME: hack type\r\n                        const existIndex = chosenValues.indexOf(dataItem.value);\r\n                        if (existIndex === -1) {\r\n                            chosenValues.push(dataItem.value);\r\n                        }\r\n                        else {\r\n                            chosenValues.splice(existIndex, 1);\r\n                        }\r\n                        return value;\r\n                    }\r\n                }\r\n                else {\r\n                    /* if value is not exist before, init value */\r\n                    return level === 2\r\n                        ? [firstLevelSelectValue, [dataItem.value]]\r\n                        : [dataItem.value];\r\n                }\r\n            }\r\n            return level === 2\r\n                ? [this.state.firstLevelSelectValue, dataItem.value]\r\n                : [dataItem.value];\r\n        };\r\n        this.onClickSubMenuItem = (dataItem) => {\r\n            const { onChange } = this.props;\r\n            const value = this.getSelectValue(dataItem);\r\n            this.setState({ value });\r\n            setTimeout(() => {\r\n                // if onChange will close the menu, set a little time to show its selection state.\r\n                if (onChange) {\r\n                    onChange(value);\r\n                }\r\n            }, 300);\r\n        };\r\n        this.state = {\r\n            firstLevelSelectValue: this.getNewFsv(props),\r\n            value: props.value,\r\n            height: props.height,\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.value !== this.props.value) {\r\n            this.setState({\r\n                firstLevelSelectValue: this.getNewFsv(nextProps),\r\n                value: nextProps.value,\r\n            });\r\n        }\r\n        if (this.props.height !== nextProps.height) {\r\n            this.setState({\r\n                height: nextProps.height,\r\n            });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (!('height' in this.props)) {\r\n            this.setState({\r\n                height: Math.round(document.documentElement.clientHeight / 2),\r\n            });\r\n        }\r\n    }\r\n    getNewFsv(props) {\r\n        const { value, data } = props;\r\n        let firstValue = '';\r\n        if (value && value.length) {\r\n            // if has init path, chose init first value\r\n            firstValue = value[0]; // this is a contract\r\n        }\r\n        else if (data && data.length && !data[0].isLeaf) {\r\n            // chose the first menu item if it's not leaf.\r\n            firstValue = data[0].value;\r\n        }\r\n        return firstValue;\r\n    }\r\n    render() {\r\n        const { className, style, data = [], prefixCls, level, multiSelect, multiSelectMenuBtnsCls, MenuSelectContanerPrefixCls, } = this.props;\r\n        const { firstLevelSelectValue, value, height } = this.state;\r\n        let subMenuData = data; // menu only has one level as init\r\n        if (level === 2) {\r\n            let parent = data;\r\n            if (firstLevelSelectValue && firstLevelSelectValue !== '') {\r\n                parent = data.filter(dataItem => dataItem.value === firstLevelSelectValue);\r\n            }\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            if (parent[0] && parent[0].children && parent[0].isLeaf !== true) {\r\n                subMenuData = parent[0].children;\r\n            }\r\n            else {\r\n                subMenuData = [];\r\n            }\r\n        }\r\n        let subValue = (value && value.length > 0 && [...value]) || [];\r\n        if (level === 2 && subValue.length > 1) {\r\n            subValue.shift();\r\n            if (multiSelect) {\r\n                /* example: [[1,2,3]] -> [1,2,3] */\r\n                subValue = subValue[0]; // FIXME: hack type\r\n            }\r\n        }\r\n        const parentValue = value && value.length > 1 && level === 2 ? value[0] : null;\r\n        const subSelInitItem = subMenuData\r\n            .filter(dataItem => subValue.indexOf(dataItem.value) !== -1)\r\n            .map(item => {\r\n            return item.value;\r\n        });\r\n        let showSelect = true;\r\n        if (level === 2 && parentValue !== firstLevelSelectValue) {\r\n            showSelect = false;\r\n        }\r\n        const heightStyle = height !== undefined\r\n            ? {\r\n                height: `${height}px`,\r\n            }\r\n            : {};\r\n        return (React.createElement(Flex, { className: classnames(prefixCls, {\r\n                [className]: !!className,\r\n            }), style: Object.assign({}, style, heightStyle), direction: \"column\", align: \"stretch\" },\r\n            React.createElement(Flex, { align: \"start\", className: classnames({\r\n                    [MenuSelectContanerPrefixCls]: true,\r\n                }) },\r\n                level === 2 && (React.createElement(Flex.Item, null,\r\n                    React.createElement(List, { role: \"tablist\" }, data.map((dataItem, index) => (React.createElement(List.Item, { className: dataItem.value === firstLevelSelectValue\r\n                            ? `${prefixCls}-selected`\r\n                            : '', onClick: () => this.onClickFirstLevelItem(dataItem), key: `listitem-1-${index}`, role: \"tab\", \"aria-selected\": dataItem.value === firstLevelSelectValue }, dataItem.label)))))),\r\n                React.createElement(Flex.Item, { role: \"tabpanel\", \"aria-hidden\": \"false\", className: `${MenuSelectContanerPrefixCls}-submenu` },\r\n                    React.createElement(SubMenu, { subMenuPrefixCls: this.props.subMenuPrefixCls, radioPrefixCls: this.props.radioPrefixCls, subMenuData: subMenuData, selItem: subSelInitItem, onSel: this.onClickSubMenuItem, showSelect: showSelect, multiSelect: multiSelect }))),\r\n            multiSelect && (React.createElement(\"div\", { className: multiSelectMenuBtnsCls },\r\n                React.createElement(Button, { inline: true, className: `${multiSelectMenuBtnsCls}-btn`, onClick: this.onMenuCancel }, \"\\u53D6\\u6D88\"),\r\n                React.createElement(Button, { inline: true, type: \"primary\", className: `${multiSelectMenuBtnsCls}-btn`, onClick: this.onMenuOk }, \"\\u786E\\u5B9A\")))));\r\n    }\r\n}\r\nMenu.defaultProps = {\r\n    prefixCls: 'am-menu',\r\n    subMenuPrefixCls: 'am-sub-menu',\r\n    radioPrefixCls: 'am-radio',\r\n    multiSelectMenuBtnsCls: 'am-multi-select-btns',\r\n    MenuSelectContanerPrefixCls: 'am-menu-select-container',\r\n    data: [],\r\n    level: 2,\r\n    onChange: () => { },\r\n    onOk: () => { },\r\n    onCancel: () => { },\r\n    multiSelect: false,\r\n};\r\n"}
