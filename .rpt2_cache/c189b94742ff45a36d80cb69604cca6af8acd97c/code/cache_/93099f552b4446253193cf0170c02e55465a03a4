{"code":"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport closest from '../_util/closest';\r\nimport Modal from './Modal';\r\nexport default function prompt(title, message, callbackOrActions, type = 'default', defaultValue = '', placeholders = ['', ''], platform = 'ios') {\r\n    let closed = false;\r\n    defaultValue =\r\n        typeof defaultValue === 'string'\r\n            ? defaultValue\r\n            : typeof defaultValue === 'number' ? `${defaultValue}` : '';\r\n    if (!callbackOrActions) {\r\n        // console.log('Must specify callbackOrActions');\r\n        return {\r\n            close: () => { },\r\n        };\r\n    }\r\n    const prefixCls = 'am-modal';\r\n    const data = {\r\n        text: defaultValue,\r\n    };\r\n    function onChange(e) {\r\n        const target = e.target;\r\n        const inputType = target.getAttribute('type');\r\n        if (inputType !== null) {\r\n            data[inputType] = target.value;\r\n        }\r\n    }\r\n    // hotfix issue: https://github.com/ant-design/ant-design-mobile/issues/2177\r\n    function onClick(e) {\r\n        const target = e.currentTarget || e.target;\r\n        if (target) {\r\n            target.focus();\r\n        }\r\n    }\r\n    let inputDom;\r\n    const focusFn = (input) => {\r\n        setTimeout(() => {\r\n            if (input) {\r\n                input.focus();\r\n            }\r\n        }, 500);\r\n    };\r\n    switch (type) {\r\n        case 'login-password':\r\n            inputDom = (React.createElement(\"div\", { className: `${prefixCls}-input-container` },\r\n                React.createElement(\"div\", { className: `${prefixCls}-input` },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"input\", { type: \"text\", defaultValue: data.text, ref: input => focusFn(input), onClick: onClick, onChange: onChange, placeholder: placeholders[0] }))),\r\n                React.createElement(\"div\", { className: `${prefixCls}-input` },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"input\", { type: \"password\", defaultValue: data.password, onClick: onClick, onChange: onChange, placeholder: placeholders[1] })))));\r\n            break;\r\n        case 'secure-text':\r\n            inputDom = (React.createElement(\"div\", { className: `${prefixCls}-input-container` },\r\n                React.createElement(\"div\", { className: `${prefixCls}-input` },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"input\", { type: \"password\", defaultValue: data.password, ref: input => focusFn(input), onClick: onClick, onChange: onChange, placeholder: placeholders[0] })))));\r\n            break;\r\n        case 'default':\r\n        default:\r\n            inputDom = (React.createElement(\"div\", { className: `${prefixCls}-input-container` },\r\n                React.createElement(\"div\", { className: `${prefixCls}-input` },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"input\", { type: \"text\", defaultValue: data.text, ref: input => focusFn(input), onClick: onClick, onChange: onChange, placeholder: placeholders[0] })))));\r\n    }\r\n    const content = (React.createElement(\"div\", null,\r\n        message,\r\n        inputDom));\r\n    const div = document.createElement('div');\r\n    document.body.appendChild(div);\r\n    function close() {\r\n        ReactDOM.unmountComponentAtNode(div);\r\n        if (div && div.parentNode) {\r\n            div.parentNode.removeChild(div);\r\n        }\r\n    }\r\n    function handleConfirm(callback) {\r\n        if (typeof callback !== 'function') {\r\n            return;\r\n        }\r\n        const { text = '', password = '' } = data;\r\n        const callbackArgs = type === 'login-password'\r\n            ? [text, password]\r\n            : type === 'secure-text' ? [password] : [text];\r\n        return callback(...callbackArgs);\r\n    }\r\n    let actions;\r\n    if (typeof callbackOrActions === 'function') {\r\n        actions = [\r\n            {\r\n                text: '取消',\r\n                onPress: () => { },\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    handleConfirm(callbackOrActions);\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    else {\r\n        actions = callbackOrActions.map(item => {\r\n            return {\r\n                text: item.text,\r\n                onPress: () => {\r\n                    return handleConfirm(item.onPress);\r\n                },\r\n            };\r\n        });\r\n    }\r\n    const footer = actions.map(button => {\r\n        // tslint:disable-next-line:only-arrow-functions\r\n        const orginPress = button.onPress || function () { };\r\n        button.onPress = () => {\r\n            if (closed) {\r\n                return;\r\n            }\r\n            const res = orginPress();\r\n            if (res && res.then) {\r\n                res\r\n                    .then(() => {\r\n                    closed = true;\r\n                    close();\r\n                })\r\n                    .catch(() => { });\r\n            }\r\n            else {\r\n                closed = true;\r\n                close();\r\n            }\r\n        };\r\n        return button;\r\n    });\r\n    function onWrapTouchStart(e) {\r\n        // exclude input element for focus\r\n        if (!/iPhone|iPod|iPad/i.test(navigator.userAgent)) {\r\n            return;\r\n        }\r\n        const pNode = closest(e.target, `.${prefixCls}-content`);\r\n        if (!pNode) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    ReactDOM.render(React.createElement(Modal, { visible: true, transparent: true, prefixCls: prefixCls, title: title, closable: false, maskClosable: false, transitionName: \"am-zoom\", footer: footer, maskTransitionName: \"am-fade\", platform: platform, wrapProps: { onTouchStart: onWrapTouchStart } },\r\n        React.createElement(\"div\", { className: `${prefixCls}-propmt-content` }, content)), div);\r\n    return {\r\n        close,\r\n    };\r\n}\r\n"}
