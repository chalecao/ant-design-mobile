{"code":"import classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nexport default class SegmentedControl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedIndex: props.selectedIndex,\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.selectedIndex !== this.state.selectedIndex) {\r\n            this.setState({\r\n                selectedIndex: nextProps.selectedIndex,\r\n            });\r\n        }\r\n    }\r\n    onClick(e, index, value) {\r\n        const { disabled, onChange, onValueChange } = this.props;\r\n        if (!disabled && this.state.selectedIndex !== index) {\r\n            // just do a mock so that the api to be the same as react-native\r\n            e.nativeEvent = e.nativeEvent ? e.nativeEvent : {};\r\n            e.nativeEvent.selectedSegmentIndex = index;\r\n            e.nativeEvent.value = value;\r\n            if (onChange) {\r\n                onChange(e);\r\n            }\r\n            if (onValueChange) {\r\n                onValueChange(value);\r\n            }\r\n            this.setState({\r\n                selectedIndex: index,\r\n            });\r\n        }\r\n    }\r\n    renderSegmentItem(idx, value, selected) {\r\n        const { prefixCls, disabled, tintColor } = this.props;\r\n        const itemCls = classnames(`${prefixCls}-item`, {\r\n            [`${prefixCls}-item-selected`]: selected,\r\n        });\r\n        const itemStyle = {\r\n            color: selected ? '#fff' : tintColor,\r\n            backgroundColor: selected ? tintColor : 'transparent',\r\n            borderColor: tintColor,\r\n        };\r\n        const activeInnerStyle = tintColor\r\n            ? {\r\n                backgroundColor: tintColor,\r\n            }\r\n            : {};\r\n        return (React.createElement(TouchFeedback, { key: idx, disabled: disabled, activeClassName: `${prefixCls}-item-active` },\r\n            React.createElement(\"div\", { className: itemCls, style: itemStyle, role: \"tab\", \"aria-selected\": selected && !disabled, \"aria-disabled\": disabled, onClick: disabled ? undefined : e => this.onClick(e, idx, value) },\r\n                React.createElement(\"div\", { className: `${prefixCls}-item-inner`, style: activeInnerStyle }),\r\n                value)));\r\n    }\r\n    render() {\r\n        const { className, prefixCls, style, disabled, values = [] } = this.props;\r\n        const wrapCls = classnames(className, prefixCls, {\r\n            [`${prefixCls}-disabled`]: disabled,\r\n        });\r\n        return (React.createElement(\"div\", { className: wrapCls, style: style, role: \"tablist\" }, values.map((value, idx) => \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        this.renderSegmentItem(idx, value, idx === this.state.selectedIndex))));\r\n    }\r\n}\r\nSegmentedControl.defaultProps = {\r\n    prefixCls: 'am-segment',\r\n    selectedIndex: 0,\r\n    disabled: false,\r\n    values: [],\r\n    onChange() { },\r\n    onValueChange() { },\r\n    style: {},\r\n    tintColor: '',\r\n};\r\n"}
