{"code":"import * as tslib_1 from \"tslib\";\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport Icon from '../icon';\r\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\r\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\r\nfunction isString(str) {\r\n    return typeof str === 'string';\r\n}\r\n// Insert one space between two chinese characters automatically.\r\nfunction insertSpace(child) {\r\n    if (isString(child.type) && isTwoCNChar(child.props.children)) {\r\n        return React.cloneElement(child, {}, child.props.children.split('').join(' '));\r\n    }\r\n    if (isString(child)) {\r\n        if (isTwoCNChar(child)) {\r\n            child = child.split('').join(' ');\r\n        }\r\n        return React.createElement(\"span\", null, child);\r\n    }\r\n    return child;\r\n}\r\nclass Button extends React.Component {\r\n    render() {\r\n        const _a = this.props, { children, className, prefixCls, type, size, inline, disabled, icon, loading, activeStyle, activeClassName, onClick } = _a, restProps = tslib_1.__rest(_a, [\"children\", \"className\", \"prefixCls\", \"type\", \"size\", \"inline\", \"disabled\", \"icon\", \"loading\", \"activeStyle\", \"activeClassName\", \"onClick\"]);\r\n        const iconType = loading ? 'loading' : icon;\r\n        const wrapCls = classnames(prefixCls, className, {\r\n            [`${prefixCls}-primary`]: type === 'primary',\r\n            [`${prefixCls}-ghost`]: type === 'ghost',\r\n            [`${prefixCls}-warning`]: type === 'warning',\r\n            [`${prefixCls}-small`]: size === 'small',\r\n            [`${prefixCls}-inline`]: inline,\r\n            [`${prefixCls}-disabled`]: disabled,\r\n            [`${prefixCls}-loading`]: loading,\r\n            [`${prefixCls}-icon`]: !!iconType,\r\n        });\r\n        const kids = React.Children.map(children, insertSpace);\r\n        let iconEl;\r\n        if (typeof iconType === 'string') {\r\n            iconEl = (React.createElement(Icon, { \"aria-hidden\": \"true\", type: iconType, size: size === 'small' ? 'xxs' : 'md', className: `${prefixCls}-icon` }));\r\n        }\r\n        else if (iconType) {\r\n            const rawCls = iconType.props && iconType.props.className;\r\n            const cls = classnames('am-icon', `${prefixCls}-icon`, size === 'small' ? 'am-icon-xxs' : 'am-icon-md');\r\n            iconEl = React.cloneElement(iconType, {\r\n                className: rawCls ? `${rawCls} ${cls}` : cls,\r\n            });\r\n        }\r\n        // use div, button native is buggy @yiminghe\r\n        return (React.createElement(TouchFeedback\r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        , { \r\n            // tslint:disable-next-line:jsx-no-multiline-js\r\n            activeClassName: activeClassName || (activeStyle ? `${prefixCls}-active` : undefined), disabled: disabled, activeStyle: activeStyle },\r\n            React.createElement(\"a\", Object.assign({ role: \"button\", className: wrapCls }, restProps, { onClick: disabled ? undefined : onClick, \"aria-disabled\": disabled }),\r\n                iconEl,\r\n                kids)));\r\n    }\r\n}\r\nButton.defaultProps = {\r\n    prefixCls: 'am-button',\r\n    size: 'large',\r\n    inline: false,\r\n    disabled: false,\r\n    loading: false,\r\n    activeStyle: {},\r\n};\r\nexport default Button;\r\n"}
