{"code":"import * as tslib_1 from \"tslib\";\r\n/* tslint:disable:jsx-no-multiline-js */\r\nimport treeFilter from 'array-tree-filter';\r\nimport React from 'react';\r\nimport RMCCascader from 'rmc-cascader/lib/Cascader';\r\nimport RMCPopupCascader from 'rmc-cascader/lib/Popup';\r\nimport RMCMultiPicker from 'rmc-picker/lib/MultiPicker';\r\nimport RMCPicker from 'rmc-picker/lib/Picker';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nexport function getDefaultProps() {\r\n    const defaultFormat = (values) => {\r\n        return values.join(',');\r\n    };\r\n    return {\r\n        triggerType: 'onClick',\r\n        prefixCls: 'am-picker',\r\n        pickerPrefixCls: 'am-picker-col',\r\n        popupPrefixCls: 'am-picker-popup',\r\n        format: defaultFormat,\r\n        cols: 3,\r\n        cascade: true,\r\n        title: '',\r\n    };\r\n}\r\nexport default class AbstractPicker extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getSel = () => {\r\n            const value = this.props.value || [];\r\n            let treeChildren;\r\n            const { data } = this.props;\r\n            if (this.props.cascade) {\r\n                treeChildren = treeFilter(data, (c, level) => {\r\n                    return c.value === value[level];\r\n                });\r\n            }\r\n            else {\r\n                treeChildren = value.map((v, i) => {\r\n                    return data[i].filter(d => d.value === v)[0];\r\n                });\r\n            }\r\n            return (this.props.format &&\r\n                this.props.format(treeChildren.map(v => {\r\n                    return v.label;\r\n                })));\r\n        };\r\n        this.getPickerCol = () => {\r\n            const { data, pickerPrefixCls, itemStyle, indicatorStyle } = this.props;\r\n            return data.map((col, index) => {\r\n                return (React.createElement(RMCPicker, { key: index, prefixCls: pickerPrefixCls, style: { flex: 1 }, itemStyle: itemStyle, indicatorStyle: indicatorStyle }, col.map(item => {\r\n                    return (React.createElement(RMCPicker.Item, { key: item.value, value: item.value }, item.label));\r\n                })));\r\n            });\r\n        };\r\n        this.onOk = (v) => {\r\n            if (this.scrollValue !== undefined) {\r\n                v = this.scrollValue;\r\n            }\r\n            if (this.props.onChange) {\r\n                this.props.onChange(v);\r\n            }\r\n            if (this.props.onOk) {\r\n                this.props.onOk(v);\r\n            }\r\n        };\r\n        this.setScrollValue = (v) => {\r\n            this.scrollValue = v;\r\n        };\r\n        this.setCasecadeScrollValue = (v) => {\r\n            // 级联情况下保证数据正确性，滚动过程中只有当最后一级变化时才变更数据\r\n            if (v && this.scrollValue) {\r\n                const length = this.scrollValue.length;\r\n                if (length === v.length &&\r\n                    this.scrollValue[length - 1] === v[length - 1]) {\r\n                    return;\r\n                }\r\n            }\r\n            this.setScrollValue(v);\r\n        };\r\n        this.fixOnOk = (cascader) => {\r\n            if (cascader && cascader.onOk !== this.onOk) {\r\n                cascader.onOk = this.onOk;\r\n                cascader.forceUpdate();\r\n            }\r\n        };\r\n        this.onPickerChange = (v) => {\r\n            this.setScrollValue(v);\r\n            if (this.props.onPickerChange) {\r\n                this.props.onPickerChange(v);\r\n            }\r\n        };\r\n        this.onVisibleChange = (visible) => {\r\n            this.setScrollValue(undefined);\r\n            if (this.props.onVisibleChange) {\r\n                this.props.onVisibleChange(visible);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        const _a = this.props, { children, value = [], popupPrefixCls, itemStyle, indicatorStyle, okText, dismissText, extra, cascade, prefixCls, pickerPrefixCls, data, cols, onOk } = _a, restProps = tslib_1.__rest(_a, [\"children\", \"value\", \"popupPrefixCls\", \"itemStyle\", \"indicatorStyle\", \"okText\", \"dismissText\", \"extra\", \"cascade\", \"prefixCls\", \"pickerPrefixCls\", \"data\", \"cols\", \"onOk\"]);\r\n        // tslint:disable-next-line:variable-name\r\n        const _locale = getComponentLocale(this.props, this.context, 'Picker', () => require('./locale/zh_CN'));\r\n        let cascader;\r\n        let popupMoreProps = {};\r\n        if (cascade) {\r\n            cascader = (React.createElement(RMCCascader, { prefixCls: prefixCls, pickerPrefixCls: pickerPrefixCls, data: data, cols: cols, onChange: this.onPickerChange, onScrollChange: this.setCasecadeScrollValue, pickerItemStyle: itemStyle, indicatorStyle: indicatorStyle }));\r\n        }\r\n        else {\r\n            cascader = (React.createElement(RMCMultiPicker, { style: { flexDirection: 'row', alignItems: 'center' }, prefixCls: prefixCls, onScrollChange: this.setScrollValue }, this.getPickerCol()));\r\n            popupMoreProps = {\r\n                pickerValueProp: 'selectedValue',\r\n                pickerValueChangeProp: 'onValueChange',\r\n            };\r\n        }\r\n        return (React.createElement(RMCPopupCascader, Object.assign({ cascader: cascader }, this.popupProps, restProps, { prefixCls: popupPrefixCls, value: value, dismissText: dismissText || _locale.dismissText, okText: okText || _locale.okText }, popupMoreProps, { ref: this.fixOnOk, onVisibleChange: this.onVisibleChange }), children &&\r\n            typeof children !== 'string' &&\r\n            React.isValidElement(children) &&\r\n            React.cloneElement(children, {\r\n                extra: this.getSel() || extra || _locale.extra,\r\n            })));\r\n    }\r\n}\r\n"}
