{"code":"import classnames from 'classnames';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { addClass, removeClass } from '../_util/class';\r\nimport CustomKeyboard from './CustomKeyboard';\r\nimport Portal from './Portal';\r\nlet instanceArr = [];\r\nlet customNumberKeyboard = null;\r\nconst IS_REACT_16 = !!ReactDOM.createPortal;\r\nclass NumberInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = (value) => {\r\n            if (!('value' in this.props)) {\r\n                this.setState({ value: value.target.value });\r\n            }\r\n            this.props.onChange(value);\r\n        };\r\n        this.onConfirm = (value) => {\r\n            this.props.onVirtualKeyboardConfirm(value);\r\n        };\r\n        this.addBlurListener = () => {\r\n            document.addEventListener('click', this.doBlur, false);\r\n        };\r\n        this.removeBlurListener = () => {\r\n            document.removeEventListener('click', this.doBlur, false);\r\n        };\r\n        this.saveRef = (el) => {\r\n            if (IS_REACT_16 && el) {\r\n                customNumberKeyboard = el;\r\n                instanceArr.push({ el, container: this.container });\r\n            }\r\n        };\r\n        this.doBlur = (ev) => {\r\n            const { value } = this.state;\r\n            if (ev.target !== this.inputRef) {\r\n                this.onInputBlur(value);\r\n            }\r\n        };\r\n        this.removeCurrentExtraKeyboard = () => {\r\n            instanceArr = instanceArr.filter((item) => {\r\n                const { el, container } = item;\r\n                if (el && container && el !== customNumberKeyboard) {\r\n                    container.parentNode.removeChild(container);\r\n                }\r\n                return el === customNumberKeyboard;\r\n            });\r\n        };\r\n        this.unLinkInput = () => {\r\n            if (customNumberKeyboard &&\r\n                customNumberKeyboard.antmKeyboard &&\r\n                customNumberKeyboard.linkedInput &&\r\n                customNumberKeyboard.linkedInput === this) {\r\n                customNumberKeyboard.linkedInput = null;\r\n                addClass(customNumberKeyboard.antmKeyboard, `${this.props.keyboardPrefixCls}-wrapper-hide`);\r\n            }\r\n            // for unmount\r\n            this.removeBlurListener();\r\n            if (IS_REACT_16) {\r\n                this.removeCurrentExtraKeyboard();\r\n            }\r\n        };\r\n        this.onInputBlur = (value) => {\r\n            const { focus } = this.state;\r\n            if (focus) {\r\n                this.setState({\r\n                    focus: false,\r\n                });\r\n                this.props.onBlur(value);\r\n                setTimeout(() => {\r\n                    this.unLinkInput();\r\n                }, 50);\r\n            }\r\n        };\r\n        this.onInputFocus = () => {\r\n            const { value } = this.state;\r\n            this.props.onFocus(value);\r\n            this.setState({\r\n                focus: true,\r\n            }, () => {\r\n                if (customNumberKeyboard) {\r\n                    customNumberKeyboard.linkedInput = this;\r\n                    if (customNumberKeyboard.antmKeyboard) {\r\n                        removeClass(customNumberKeyboard.antmKeyboard, `${this.props.keyboardPrefixCls}-wrapper-hide`);\r\n                    }\r\n                    customNumberKeyboard.confirmDisabled = value === '';\r\n                    if (customNumberKeyboard.confirmKeyboardItem) {\r\n                        if (value === '') {\r\n                            addClass(customNumberKeyboard.confirmKeyboardItem, `${this.props.keyboardPrefixCls}-item-disabled`);\r\n                        }\r\n                        else {\r\n                            removeClass(customNumberKeyboard.confirmKeyboardItem, `${this.props.keyboardPrefixCls}-item-disabled`);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        this.onKeyboardClick = (KeyboardItemValue) => {\r\n            const { maxLength } = this.props;\r\n            const { value } = this.state;\r\n            // tslint:disable-next-line:no-this-assignment\r\n            const { onChange } = this;\r\n            let valueAfterChange;\r\n            // 删除键\r\n            if (KeyboardItemValue === 'delete') {\r\n                valueAfterChange = value.substring(0, value.length - 1);\r\n                onChange({ target: { value: valueAfterChange } });\r\n                // 确认键\r\n            }\r\n            else if (KeyboardItemValue === 'confirm') {\r\n                valueAfterChange = value;\r\n                onChange({ target: { value: valueAfterChange } });\r\n                this.onInputBlur(value);\r\n                this.onConfirm(value);\r\n                // 收起键\r\n            }\r\n            else if (KeyboardItemValue === 'hide') {\r\n                valueAfterChange = value;\r\n                this.onInputBlur(valueAfterChange);\r\n            }\r\n            else {\r\n                if (maxLength !== undefined &&\r\n                    +maxLength >= 0 &&\r\n                    (value + KeyboardItemValue).length > maxLength) {\r\n                    valueAfterChange = (value + KeyboardItemValue).substr(0, maxLength);\r\n                    onChange({ target: { value: valueAfterChange } });\r\n                }\r\n                else {\r\n                    valueAfterChange = value + KeyboardItemValue;\r\n                    onChange({ target: { value: valueAfterChange } });\r\n                }\r\n            }\r\n            if (customNumberKeyboard) {\r\n                customNumberKeyboard.confirmDisabled = valueAfterChange === '';\r\n                if (customNumberKeyboard.confirmKeyboardItem) {\r\n                    if (valueAfterChange === '') {\r\n                        addClass(customNumberKeyboard.confirmKeyboardItem, `${this.props.keyboardPrefixCls}-item-disabled`);\r\n                    }\r\n                    else {\r\n                        removeClass(customNumberKeyboard.confirmKeyboardItem, `${this.props.keyboardPrefixCls}-item-disabled`);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.onFakeInputClick = () => {\r\n            this.focus();\r\n        };\r\n        this.focus = () => {\r\n            // this focus may invocked by users page button click, so this click may trigger blurEventListener at the same time\r\n            this.removeBlurListener();\r\n            const { focus } = this.state;\r\n            if (!focus) {\r\n                this.onInputFocus();\r\n            }\r\n            setTimeout(() => {\r\n                this.addBlurListener();\r\n            }, 50);\r\n        };\r\n        this.state = {\r\n            focus: false,\r\n            value: props.value || '',\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if ('value' in nextProps) {\r\n            this.setState({\r\n                value: nextProps.value,\r\n            });\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        this.renderCustomKeyboard();\r\n    }\r\n    componentWillUnmount() {\r\n        // focus:true unmount 不能触发 blur\r\n        if (this.state.focus) {\r\n            this.props.onBlur(this.state.value);\r\n        }\r\n        this.unLinkInput();\r\n    }\r\n    getComponent() {\r\n        const { confirmLabel, backspaceLabel, cancelKeyboardLabel, keyboardPrefixCls, moneyKeyboardWrapProps, } = this.props;\r\n        return (React.createElement(CustomKeyboard, { ref: this.saveRef, onClick: this.onKeyboardClick, prefixCls: keyboardPrefixCls, confirmLabel: confirmLabel, backspaceLabel: backspaceLabel, cancelKeyboardLabel: cancelKeyboardLabel, wrapProps: moneyKeyboardWrapProps }));\r\n    }\r\n    getContainer() {\r\n        const { keyboardPrefixCls } = this.props;\r\n        if (IS_REACT_16) {\r\n            if (!this.container) {\r\n                const container = document.createElement('div');\r\n                container.setAttribute('id', `${keyboardPrefixCls}-container-${(new Date().getTime())}`);\r\n                document.body.appendChild(container);\r\n                this.container = container;\r\n            }\r\n        }\r\n        else {\r\n            let container = document.querySelector(`#${keyboardPrefixCls}-container`);\r\n            if (!container) {\r\n                container = document.createElement('div');\r\n                container.setAttribute('id', `${keyboardPrefixCls}-container`);\r\n                document.body.appendChild(container);\r\n            }\r\n            this.container = container;\r\n        }\r\n        return this.container;\r\n    }\r\n    renderCustomKeyboard() {\r\n        if (IS_REACT_16) {\r\n            return;\r\n        }\r\n        customNumberKeyboard = ReactDOM.unstable_renderSubtreeIntoContainer(this, this.getComponent(), this.getContainer());\r\n    }\r\n    renderPortal() {\r\n        if (!IS_REACT_16) {\r\n            return null;\r\n        }\r\n        return (React.createElement(Portal, { getContainer: () => this.getContainer() }, this.getComponent()));\r\n    }\r\n    render() {\r\n        const { placeholder, disabled, editable, moneyKeyboardAlign } = this.props;\r\n        const { focus, value } = this.state;\r\n        const preventKeyboard = disabled || !editable;\r\n        const fakeInputCls = classnames(`fake-input`, {\r\n            focus,\r\n            'fake-input-disabled': disabled,\r\n        });\r\n        const fakeInputContainerCls = classnames('fake-input-container', {\r\n            'fake-input-container-left': moneyKeyboardAlign === 'left',\r\n        });\r\n        return (React.createElement(\"div\", { className: fakeInputContainerCls },\r\n            value === '' && (\r\n            // tslint:disable-next-line:jsx-no-multiline-js\r\n            React.createElement(\"div\", { className: \"fake-input-placeholder\" }, placeholder)),\r\n            React.createElement(\"div\", { role: \"textbox\", \"aria-label\": value || placeholder, className: fakeInputCls, ref: el => (this.inputRef = el), onClick: preventKeyboard ? () => { } : this.onFakeInputClick }, value),\r\n            this.renderPortal()));\r\n    }\r\n}\r\nNumberInput.defaultProps = {\r\n    onChange: () => { },\r\n    onFocus: () => { },\r\n    onBlur: () => { },\r\n    onVirtualKeyboardConfirm: () => { },\r\n    placeholder: '',\r\n    disabled: false,\r\n    editable: true,\r\n    prefixCls: 'am-input',\r\n    keyboardPrefixCls: 'am-number-keyboard',\r\n};\r\nexport default NumberInput;\r\n"}
