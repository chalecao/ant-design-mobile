{"code":"/* tslint:disable:no-bitwise */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport Flex from '../flex';\r\nfunction noop() { }\r\nexport default class ImagePicker extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        // http://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side\r\n        this.getOrientation = (file, callback) => {\r\n            const reader = new FileReader();\r\n            reader.onload = e => {\r\n                const view = new DataView(e.target.result);\r\n                if (view.getUint16(0, false) !== 0xffd8) {\r\n                    return callback(-2);\r\n                }\r\n                const length = view.byteLength;\r\n                let offset = 2;\r\n                while (offset < length) {\r\n                    const marker = view.getUint16(offset, false);\r\n                    offset += 2;\r\n                    if (marker === 0xffe1) {\r\n                        const tmp = view.getUint32((offset += 2), false);\r\n                        if (tmp !== 0x45786966) {\r\n                            return callback(-1);\r\n                        }\r\n                        const little = view.getUint16((offset += 6), false) === 0x4949;\r\n                        offset += view.getUint32(offset + 4, little);\r\n                        const tags = view.getUint16(offset, little);\r\n                        offset += 2;\r\n                        for (let i = 0; i < tags; i++) {\r\n                            if (view.getUint16(offset + i * 12, little) === 0x0112) {\r\n                                return callback(view.getUint16(offset + i * 12 + 8, little));\r\n                            }\r\n                        }\r\n                    }\r\n                    else if ((marker & 0xff00) !== 0xff00) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        offset += view.getUint16(offset, false);\r\n                    }\r\n                }\r\n                return callback(-1);\r\n            };\r\n            reader.readAsArrayBuffer(file.slice(0, 64 * 1024));\r\n        };\r\n        this.getRotation = (orientation = 1) => {\r\n            let imgRotation = 0;\r\n            switch (orientation) {\r\n                case 3:\r\n                    imgRotation = 180;\r\n                    break;\r\n                case 6:\r\n                    imgRotation = 90;\r\n                    break;\r\n                case 8:\r\n                    imgRotation = 270;\r\n                    break;\r\n                default:\r\n            }\r\n            return imgRotation;\r\n        };\r\n        this.removeImage = (index) => {\r\n            const newImages = [];\r\n            const { files = [] } = this.props;\r\n            files.forEach((image, idx) => {\r\n                if (index !== idx) {\r\n                    newImages.push(image);\r\n                }\r\n            });\r\n            if (this.props.onChange) {\r\n                this.props.onChange(newImages, 'remove', index);\r\n            }\r\n        };\r\n        this.addImage = (imgItem) => {\r\n            const { files = [] } = this.props;\r\n            const newImages = files.concat(imgItem);\r\n            if (this.props.onChange) {\r\n                this.props.onChange(newImages, 'add');\r\n            }\r\n        };\r\n        this.onImageClick = (index) => {\r\n            if (this.props.onImageClick) {\r\n                this.props.onImageClick(index, this.props.files);\r\n            }\r\n        };\r\n        this.onFileChange = () => {\r\n            const fileSelectorEl = this.fileSelectorInput;\r\n            if (fileSelectorEl && fileSelectorEl.files && fileSelectorEl.files.length) {\r\n                const files = fileSelectorEl.files;\r\n                for (let i = 0; i < files.length; i++) {\r\n                    this.parseFile(files[i], i);\r\n                }\r\n            }\r\n            if (fileSelectorEl) {\r\n                fileSelectorEl.value = '';\r\n            }\r\n        };\r\n        this.parseFile = (file, index) => {\r\n            const reader = new FileReader();\r\n            reader.onload = e => {\r\n                const dataURL = e.target.result;\r\n                if (!dataURL) {\r\n                    if (this.props.onFail) {\r\n                        this.props.onFail(`Fail to get the ${index} image`);\r\n                    }\r\n                    return;\r\n                }\r\n                let orientation = 1;\r\n                this.getOrientation(file, res => {\r\n                    // -2: not jpeg , -1: not defined\r\n                    if (res > 0) {\r\n                        orientation = res;\r\n                    }\r\n                    this.addImage({\r\n                        url: dataURL,\r\n                        orientation,\r\n                        file,\r\n                    });\r\n                });\r\n            };\r\n            reader.readAsDataURL(file);\r\n        };\r\n    }\r\n    render() {\r\n        const { prefixCls, style, className, files = [], selectable, onAddImageClick, multiple, accept, } = this.props;\r\n        const imgItemList = [];\r\n        const wrapCls = classnames(`${prefixCls}`, className);\r\n        files.forEach((image, index) => {\r\n            const imgStyle = {\r\n                backgroundImage: `url(${image.url})`,\r\n                transform: `rotate(${this.getRotation(image.orientation)}deg)`,\r\n            };\r\n            imgItemList.push(<Flex.Item key={`item-${index}`}>\n          <div key={index} className={`${prefixCls}-item`}>\n            <div className={`${prefixCls}-item-remove`} role=\"button\" aria-label=\"Click and Remove this image\" \r\n            // tslint:disable-next-line:jsx-no-multiline-js\r\n            onClick={() => {\r\n                this.removeImage(index);\r\n            }}/>\n            <div className={`${prefixCls}-item-content`} role=\"button\" aria-label=\"Image can be clicked\" \r\n            // tslint:disable-next-line:jsx-no-multiline-js\r\n            onClick={() => {\r\n                this.onImageClick(index);\r\n            }} style={imgStyle}/>\n          </div>\n        </Flex.Item>);\r\n        });\r\n        const selectEl = (<Flex.Item key=\"select\">\n        <TouchFeedback activeClassName={`${prefixCls}-upload-btn-active`}>\n          <div className={`${prefixCls}-item ${prefixCls}-upload-btn`} onClick={onAddImageClick} role=\"button\" aria-label=\"Choose and add image\">\n            <input ref={(input) => { if (input) {\r\n            this.fileSelectorInput = input;\r\n        } }} type=\"file\" accept={accept} \r\n        // tslint:disable-next-line:jsx-no-multiline-js\r\n        onChange={() => {\r\n            this.onFileChange();\r\n        }} multiple={multiple}/>\n          </div>\n        </TouchFeedback>\n      </Flex.Item>);\r\n        let allEl = selectable ? imgItemList.concat([selectEl]) : imgItemList;\r\n        const length = allEl.length;\r\n        if (length !== 0 && length % 4 !== 0) {\r\n            const blankCount = 4 - length % 4;\r\n            const fillBlankEl = [];\r\n            for (let i = 0; i < blankCount; i++) {\r\n                fillBlankEl.push(<Flex.Item key={`blank-${i}`}/>);\r\n            }\r\n            allEl = allEl.concat(fillBlankEl);\r\n        }\r\n        const flexEl = [];\r\n        for (let i = 0; i < allEl.length / 4; i++) {\r\n            const rowEl = allEl.slice(i * 4, i * 4 + 4);\r\n            flexEl.push(rowEl);\r\n        }\r\n        const renderEl = flexEl.map((item, index) => (<Flex key={`flex-${index}`}>{item}</Flex>));\r\n        return (<div className={wrapCls} style={style}>\n        <div className={`${prefixCls}-list`} role=\"group\">\n          {renderEl}\n        </div>\n      </div>);\r\n    }\r\n}\r\nImagePicker.defaultProps = {\r\n    prefixCls: 'am-image-picker',\r\n    files: [],\r\n    onChange: noop,\r\n    onImageClick: noop,\r\n    onAddImageClick: noop,\r\n    onFail: noop,\r\n    selectable: true,\r\n    multiple: false,\r\n    accept: 'image/*',\r\n};\r\n"}
