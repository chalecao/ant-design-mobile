{"code":"import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport Tooltip from 'rmc-tooltip';\r\nimport Item from './Item';\r\nfunction recursiveCloneChildren(children, cb = (ch, _) => ch) {\r\n    return React.Children.map(children, (child, index) => {\r\n        const newChild = cb(child, index);\r\n        if (typeof newChild !== 'string' &&\r\n            typeof newChild !== 'number' &&\r\n            newChild &&\r\n            newChild.props &&\r\n            newChild.props.children) {\r\n            return React.cloneElement(newChild, {}, recursiveCloneChildren(newChild.props.children, cb));\r\n        }\r\n        return newChild;\r\n    });\r\n}\r\nexport default class Popover extends React.Component {\r\n    render() {\r\n        const _a = this.props, { overlay, onSelect = () => { } } = _a, restProps = tslib_1.__rest(_a, [\"overlay\", \"onSelect\"]);\r\n        const overlayNode = recursiveCloneChildren(overlay, (child, index) => {\r\n            const extraProps = { firstItem: false };\r\n            if (child &&\r\n                typeof child !== 'string' &&\r\n                typeof child !== 'number' &&\r\n                child.type &&\r\n                // Fixme: not sure where the `myName` came from.\r\n                child.type.myName === 'PopoverItem' &&\r\n                !child.props.disabled) {\r\n                extraProps.onClick = () => onSelect(child, index);\r\n                extraProps.firstItem = index === 0;\r\n                return React.cloneElement(child, extraProps);\r\n            }\r\n            return child;\r\n        });\r\n        const wrapperNode = (<div className={`${this.props.prefixCls}-inner-wrapper`}>\n        {overlayNode}\n      </div>);\r\n        return <Tooltip {...restProps} overlay={wrapperNode}/>;\r\n    }\r\n}\r\nPopover.defaultProps = {\r\n    prefixCls: 'am-popover',\r\n    placement: 'bottomRight',\r\n    align: { overflow: { adjustY: 0, adjustX: 0 } },\r\n    trigger: ['click'],\r\n};\r\nPopover.Item = Item;\r\n"}
