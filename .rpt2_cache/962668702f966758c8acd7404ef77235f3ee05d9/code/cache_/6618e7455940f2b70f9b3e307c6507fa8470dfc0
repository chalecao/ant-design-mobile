{"code":"/* tslint:disable:jsx-no-multiline-js */\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Dialog from 'rmc-dialog';\r\nimport TouchFeedback from 'rmc-feedback';\r\nimport getDataAttr from '../_util/getDataAttr';\r\nconst NORMAL = 'NORMAL';\r\nconst SHARE = 'SHARE';\r\n// tslint:disable-next-line:no-empty\r\nfunction noop() { }\r\nconst queue = [];\r\nfunction createActionSheet(flag, config, callback) {\r\n    const props = Object.assign({ prefixCls: 'am-action-sheet', cancelButtonText: '取消' }, config);\r\n    const { prefixCls, className, transitionName, maskTransitionName, maskClosable = true, } = props;\r\n    const div = document.createElement('div');\r\n    document.body.appendChild(div);\r\n    queue.push(close);\r\n    function close() {\r\n        if (div) {\r\n            ReactDOM.unmountComponentAtNode(div);\r\n            if (div.parentNode) {\r\n                div.parentNode.removeChild(div);\r\n            }\r\n            const index = queue.indexOf(close);\r\n            if (index !== -1) {\r\n                queue.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n    function cb(index, rowIndex = 0) {\r\n        const res = callback(index, rowIndex);\r\n        if (res && res.then) {\r\n            res.then(() => {\r\n                close();\r\n            });\r\n        }\r\n        else {\r\n            close();\r\n        }\r\n    }\r\n    const { title, message, options, destructiveButtonIndex, cancelButtonIndex, cancelButtonText, } = props;\r\n    const titleMsg = [\r\n        title ? (<h3 key=\"0\" className={`${prefixCls}-title`}>\n        {title}\n      </h3>) : null,\r\n        message ? (<div key=\"1\" className={`${prefixCls}-message`}>\n        {message}\n      </div>) : null,\r\n    ];\r\n    let children = null;\r\n    let mode = 'normal';\r\n    switch (flag) {\r\n        case NORMAL:\r\n            mode = 'normal';\r\n            const normalOptions = options;\r\n            children = (<div {...getDataAttr(props)}>\n          {titleMsg}\n          <div className={`${prefixCls}-button-list`} role=\"group\">\n            {normalOptions.map((item, index) => {\r\n                const itemProps = {\r\n                    className: classnames(`${prefixCls}-button-list-item`, {\r\n                        [`${prefixCls}-destructive-button`]: destructiveButtonIndex === index,\r\n                        [`${prefixCls}-cancel-button`]: cancelButtonIndex === index,\r\n                    }),\r\n                    onClick: () => cb(index),\r\n                    role: 'button',\r\n                };\r\n                let bItem = (<TouchFeedback key={index} activeClassName={`${prefixCls}-button-list-item-active`}>\n                  <div {...itemProps}>{item}</div>\n                </TouchFeedback>);\r\n                if (cancelButtonIndex === index ||\r\n                    destructiveButtonIndex === index) {\r\n                    bItem = (<TouchFeedback key={index} activeClassName={`${prefixCls}-button-list-item-active`}>\n                    <div {...itemProps}>\n                      {item}\n                      {cancelButtonIndex === index ? (<span className={`${prefixCls}-cancel-button-mask`}/>) : null}\n                    </div>\n                  </TouchFeedback>);\r\n                }\r\n                return bItem;\r\n            })}\n          </div>\n        </div>);\r\n            break;\r\n        case SHARE:\r\n            mode = 'share';\r\n            const multipleLine = (options.length && Array.isArray(options[0])) || false;\r\n            const createList = (item, index, rowIndex = 0) => (<div className={`${prefixCls}-share-list-item`} role=\"button\" key={index} onClick={() => cb(index, rowIndex)}>\n          <div className={`${prefixCls}-share-list-item-icon`}>{item.icon}</div>\n          <div className={`${prefixCls}-share-list-item-title`}>\n            {item.title}\n          </div>\n        </div>);\r\n            children = (<div {...getDataAttr(props)}>\n          {titleMsg}\n          <div className={`${prefixCls}-share`}>\n            {multipleLine ? (options.map((item, index) => (<div key={index} className={`${prefixCls}-share-list`}>\n                  {item.map((ii, ind) => createList(ii, ind, index))}\n                </div>))) : (<div className={`${prefixCls}-share-list`}>\n                {options.map((item, index) => createList(item, index))}\n              </div>)}\n            <TouchFeedback activeClassName={`${prefixCls}-share-cancel-button-active`}>\n              <div className={`${prefixCls}-share-cancel-button`} role=\"button\" onClick={() => cb(-1)}>\n                {cancelButtonText}\n              </div>\n            </TouchFeedback>\n          </div>\n        </div>);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    const rootCls = classnames(`${prefixCls}-${mode}`, className);\r\n    ReactDOM.render(<Dialog visible title=\"\" footer=\"\" prefixCls={prefixCls} className={rootCls} transitionName={transitionName || `am-slide-up`} maskTransitionName={maskTransitionName || `am-fade`} onClose={() => cb(cancelButtonIndex || -1)} maskClosable={maskClosable} wrapProps={props.wrapProps || {}}>\n      {children}\n    </Dialog>, div);\r\n    return {\r\n        close,\r\n    };\r\n}\r\nexport default {\r\n    showActionSheetWithOptions(config, callback = noop) {\r\n        createActionSheet(NORMAL, config, callback);\r\n    },\r\n    showShareActionSheetWithOptions(config, callback = noop) {\r\n        createActionSheet(SHARE, config, callback);\r\n    },\r\n    close() {\r\n        queue.forEach(q => q());\r\n    },\r\n};\r\n"}
