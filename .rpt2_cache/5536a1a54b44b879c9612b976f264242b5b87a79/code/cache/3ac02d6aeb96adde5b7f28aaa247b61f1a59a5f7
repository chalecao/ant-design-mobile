{"code":"/* tslint:disable:jsx-no-multiline-js */\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport RCDatePicker from 'rmc-date-picker/lib/DatePicker';\r\nimport PopupDatePicker from 'rmc-date-picker/lib/Popup';\r\nimport { getComponentLocale } from '../_util/getLocale';\r\nimport { formatFn } from './utils';\r\nexport default class DatePicker extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.setScrollValue = (v) => {\r\n            this.scrollValue = v;\r\n        };\r\n        this.onOk = (v) => {\r\n            if (this.scrollValue !== undefined) {\r\n                v = this.scrollValue;\r\n            }\r\n            if (this.props.onChange) {\r\n                this.props.onChange(v);\r\n            }\r\n            if (this.props.onOk) {\r\n                this.props.onOk(v);\r\n            }\r\n        };\r\n        this.onVisibleChange = (visible) => {\r\n            this.scrollValue = undefined;\r\n            if (this.props.onVisibleChange) {\r\n                this.props.onVisibleChange(visible);\r\n            }\r\n        };\r\n        this.fixOnOk = (picker) => {\r\n            if (picker) {\r\n                picker.onOk = this.onOk;\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        // tslint:disable-next-line:no-this-assignment\r\n        const { props, context } = this;\r\n        const { children, value, popupPrefixCls } = props;\r\n        const locale = getComponentLocale(props, context, 'DatePicker', () => require('./locale/zh_CN'));\r\n        const { okText, dismissText, extra, DatePickerLocale } = locale;\r\n        /**\r\n         * 注意:\r\n         * 受控 表示 通过设置 value 属性、组件的最终状态跟 value 设置值一致。\r\n         * 默认不设置 value 或 只设置 defaultValue 表示非受控。\r\n         *\r\n         * DatePickerView 对外通过 value “只支持 受控” 模式（可以使用 defaultDate 支持 非受控 模式，但不对外）\r\n         * PickerView 对外通过 value “只支持 受控” 模式\r\n         *\r\n         * DatePicker / Picker 对外只有 value 属性 (没有 defaultValue)，\r\n         * 其中 List 展示部分 “只支持 受控” 模式，\r\n         * 弹出的 选择器部分 会随外部 value 改变而变、同时能自由滚动\r\n         * （即不会因为传入的 value 不变而不能滚动 (不像原生 input 的受控行为)）\r\n         *\r\n         */\r\n        const dataPicker = (<RCDatePicker minuteStep={props.minuteStep} locale={DatePickerLocale} minDate={props.minDate} maxDate={props.maxDate} mode={props.mode} pickerPrefixCls={props.pickerPrefixCls} prefixCls={props.prefixCls} defaultDate={value || new Date()} use12Hours={props.use12Hours} onValueChange={props.onValueChange} onScrollChange={this.setScrollValue}/>);\r\n        return (<PopupDatePicker datePicker={dataPicker} WrapComponent=\"div\" transitionName=\"am-slide-up\" maskTransitionName=\"am-fade\" {...props} prefixCls={popupPrefixCls} date={value || new Date()} dismissText={this.props.dismissText || dismissText} okText={this.props.okText || okText} ref={this.fixOnOk} onVisibleChange={this.onVisibleChange}>\n        {children &&\r\n            React.isValidElement(children) &&\r\n            React.cloneElement(children, {\r\n                extra: value ? formatFn(this, value) : this.props.extra || extra,\r\n            })}\n      </PopupDatePicker>);\r\n    }\r\n}\r\nDatePicker.defaultProps = {\r\n    mode: 'datetime',\r\n    prefixCls: 'am-picker',\r\n    pickerPrefixCls: 'am-picker-col',\r\n    popupPrefixCls: 'am-picker-popup',\r\n    minuteStep: 1,\r\n    use12Hours: false,\r\n};\r\nDatePicker.contextTypes = {\r\n    antLocale: PropTypes.object,\r\n};\r\n"}
